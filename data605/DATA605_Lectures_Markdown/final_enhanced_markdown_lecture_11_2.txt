::: columns
:::: {.column width=15%}
![](lectures_source/UMD_Logo.png)
::::
:::: {.column width=75%}

\vspace{0.4cm}
\begingroup \large
UMD DATA605 - Big Data Systems
\endgroup
::::
:::

\vspace{1cm}

\begingroup \Large
**AWS Overview**
\endgroup

::: columns
:::: {.column width=75%}
\vspace{1cm}

**Instructor**: Dr. GP Saggese - `gsaggese@umd.edu`**

**TAs**:
Krishna Pratardan Taduri, kptaduri@umd.edu
Prahar Kaushikbhai Modi, pmodi08@umd.edu

**v1.1**
::::
:::: {.column width=20%}

::::
:::


# ##############################################################################
# UMD DATA605 - Big Data Systems
# ##############################################################################

* UMD DATA605 - Big Data Systems

Dr. GP Saggese
gsaggese@umd.edu

# ##############################################################################
# AWS: Resources
# ##############################################################################

* AWS: Resources
- Some basic info in the slides
- Many tutorials on-line
- Mastery
  - Amazon Web Services in Action 3rd Edition

2

![](images/lecture_11_2/lec_11_2_slide_2_image_1.png)

# ##############################################################################
# Amazon Web Services (AWS)
# ##############################################################################

* Amazon Web Services (AWS)
- **AWS is a platform offering complete cloud solutions**
  - Computing (e.g., EC2)
  - Storing (e.g., S3)
  - Networking
- **It offers different levels of abstractions**
  - IAAS, PAAS, SAAS
  - From virtual hardware to applications, e.g.,
    - Host web sites
    - Run enterprise software
    - Run machine learning applications
- **Services can be controlled in different ways**
  - A web interface (aka “console”)
  - CLI: **aws** command
  - Programmatically
    - Through language libraries, SDK (e.g., Python **boto3**)

3

# ##############################################################################
# AWS as Business
# ##############################################################################

* AWS as Business
- Services charge a pay-per-use pricing model
- Data centers are distributed globally
  - US, Europe, Asia, South America
- 500 new services and features every year
- Insanely profitable
  - 91B/year in revenue (2023)
  - Grows 42% year-over-year
  - Controls 30% of cloud business

4

![](images/lecture_11_2/lec_11_2_slide_4_image_1.png)

**Beef Jezos**

![](images/lecture_11_2/lec_11_2_slide_4_image_2.png)

# ##############################################################################
# Types of Cloud Computing
# ##############################################################################

* Types of Cloud Computing
- Cloud computing enables a shared pool of configurable computing resources
  - E.g., servers, storage, networks, applications, services
     to be used:
  - From everywhere
  - Conveniently
  - On-demand
- Clouds can be:
  - *Public*: open to use by general public (e.g., AWS)
  - *Private*: virtualize and share IT infrastructure within a single organization (e.g., government)
  - *Hybrid*: a mixture of public and private clouds

5

# ##############################################################################
# AWS vs Google Cloud vs Microsoft Azure
# ##############################################################################

* AWS vs Google Cloud vs Microsoft Azure
- **Similarities:**
  - Worldwide infrastructure
  - Provide IAAS (computing, networking, storage)
    - AWS EC2 / Google Compute Engine / Azure VMs
    - AWS S3 / Google Cloud Storage / Azure Blob storage
  - Pay-as-you-go pricing model
- **Differences:**
  - AWS
    - Market leader, most mature, and powerful
    - (ab)uses a lot of open source technologies
  - Azure provides Microsoft stack in the cloud
  - Google seems more focused on cloud-native applications rather than migrating local applications to the cloud

6

![](images/lecture_11_2/lec_11_2_slide_6_image_1.png)

![](images/lecture_11_2/lec_11_2_slide_6_image_2.png)

![](images/lecture_11_2/lec_11_2_slide_6_image_3.png)

# ##############################################################################
# From On-premise to AWS (1)
# ##############################################################################

* From On-premise to AWS
- **Aka “Cloud-transformation”**
- **Move a medium-sized e-commerce site from on-premise to the cloud**
- **Architecture**
  - **Web-server**: handle requests from customers
  - **DB**: store product information and orders
  - **Static content** (e.g., JPEG image)
    - Delivered over a content delivery network (CDN)
    - Reduce load on company services
  - **Dynamic content** (e.g., HTML pages)
    - E.g., products and prices
    - Delivered by web server

# ##############################################################################
# From On-premise to AWS (2)
# ##############################################################################

* From On-premise to AWS
- **Step 1: Move to cloud**

8

![](images/lecture_11_2/lec_11_2_slide_8_image_1.png)
```

```markdown
# ##############################################################################
# From On-premise to AWS (3)
# ##############################################################################

* From On-premise to AWS
- **Step 2: Design for the cloud**
- DNS
- Database
- Object store (S3)
- Potentially managed solutions
- Use multiple smaller virtual services using load balancer to increase reliability

9

![alt_text](images/lecture_11_2/lec_11_2_slide_9_image_1.png)

# ##############################################################################
# Low-Cost Batch Processing
# ##############################################################################

* Low-Cost Batch Processing
- Lots of batch jobs run on a schedule
  - E.g., analyze data once a day
  - E.g., tools generate reports from a DB
- Normally you need to buy/allocate machine
- AWS bills VMs per minute
  - Pay only when you run your job
- AWS Batch
  - AWS offers spare capacity at a discount
  - It's not crucial to execute the batch jobs at a specific time
  - Run when there is capacity, e.g., saving 50%
- AWS Lambda
  - Serverless

10

# ##############################################################################
# Capacity Scaling
# ##############################################################################

* Capacity Scaling
- **No need to plan for capacity**
  - You don't have to predict capacity
  - You can schedule capacity on-the-fly
  - No need to think about rackspace, switches, power supplies
  - If your system grows, add more VMs (from 1 to 1000) and storage (from GB to PB)
- **You can handle seasonal traffic patterns by scaling up / down the, e.g.,**
  - Day vs night
  - Weekday vs weekend
  - Holiday
  - E.g., you don't need a test system when the team is off (at night and during the weekend)
- **Worldwide presence**
  - AWS has many data centers
  - You can deploy applications close to your customers

11

![alt_text](images/lecture_11_2/lec_11_2_slide_11_image_1.png)

![alt_text](images/lecture_11_2/lec_11_2_slide_11_image_2.png)

# ##############################################################################
# Pay-per-use (1)
# ##############################################################################

* Pay-per-use
- **AWS bill**
  - Similar to an electric bill
  - Services are billed based on usage, e.g.,
    - Hours of virtual server (rounded up to hours)
    - Used storage in GB (allocated or real capacity)
    - Data traffic in GB or number of requests
- Free tier
  - Use some AWS services for free for 12 months after signing up
  - Get experience using services (e.g., EC2, S3)
  - If you exceed the limits, you start paying (without further notice)
    - Need to set an alarm!

12

![alt_text](images/lecture_11_2/lec_11_2_slide_12_image_1.png)

# ##############################################################################
# Pay-per-use (2)
# ##############################################################################

* Pay-per-use
- **Advantages**
  - No need for upfront investments or commitment
  - The price to start a project is lowered
  - Easier to divide system into smaller parts, because the cost is the same
    - One big server or two smaller ones with the same capacity have the same price
  - Make fault tolerance / high performance affordable
    - For scalable workload, buy 1 server for 1000 hours = buy 1000 servers for 1 hour

13

![alt_text](images/lecture_11_2/lec_11_2_slide_13_image_1.png)

# ##############################################################################
# Interacting with AWS
# ##############################################################################

* Interacting with AWS
- **AWS internal API allows to interact with services**
- **GUI (Management Console)**
  - Easy to start interacting with services
  - Set up a cloud infrastructure for development and testing
- **Command-line tool (CLI)**
  - Manage and access AWS services
  - Automate recurring tools
- **SDKs**
  - Use library in almost any language to interact with AWS
  - Integrate applications with AWS
  - E.g., **boto3** for Python
- **Blueprints**
  - Description of your system containing all services and dependencies
  - It describes the system, it does not explain how to build it

14

![alt_text](images/lecture_11_2/lec_11_2_slide_14_image_1.png)

![alt_text](images/lecture_11_2/lec_11_2_slide_14_image_2.png)

![alt_text](images/lecture_11_2/lec_11_2_slide_14_image_3.png)

# ##############################################################################
# Accounts and Users
# ##############################################################################

* Accounts and Users
- **Users**
  - There is one root AWS account
  - You can attach multiple users to an account
    - Different privileges
    - Isolate different workloads
- **Be safe**
  - Never use root account to develop!
  - Always use 2FA!
  - Avoid my 40,000 mistake
- **Key pair**
  - To access a virtual server you need to create a key pair
  - Public key (in AWS and on virtual servers)
  - Private key is your secret
    - Don't lose it, you can't retrieve it

15

![alt_text](images/lecture_11_2/lec_11_2_slide_15_image_1.png)

# ##############################################################################
# AWS VMs
# ##############################################################################

* AWS VMs
- With virtualization multiple VMs can run on the same hardware
  - VMs can be started and stopped on-demand
- Physical server
  - Aka "host machine", "bare metal"
  - Each physical server consists of CPUs, memory, networking interfaces, and storage
- Hypervisor (software + CPU hardware)
  - Isolates guests
  - Schedules requests to the hardware
- Virtual servers (aka "guests") are isolated from each other on the same hardware
- AWS
  - Used to use Xen hypervisor (open-source)
  - Switched recently to AWS Nitro, hardware assisted virtualization
    - Performance close to bare metal

16

![alt_text](images/lecture_11_2/lec_11_2_slide_16_image_1.png)
```

```
# ##############################################################################
# Starting an EC2 Instance (1)
# ##############################################################################

* Starting an EC2 Instance
- **Select region**
  - E.g., **us-east-1**
  - Where is it?
    - 21155 Smith Switch Road, Ashburn, VA, USA

17

![](images/lecture_11_2/lec_11_2_slide_17_image_1.png)

![](images/lecture_11_2/lec_11_2_slide_17_image_2.png)

![](images/lecture_11_2/lec_11_2_slide_17_image_3.png)

# ##############################################################################
# Starting an EC2 Instance (2)
# ##############################################################################

* Starting an EC2 Instance
- **Select OS**
  - Amazon Machine Image (AMI)
  - Contains OS + pre-installed software
  - No need to spend (dev and machine) time installing OS, packages, software
- **Choose instance parameters**
  - E.g., **t2.micro**
  - More info later
- **Configure instance**
  - Network, shutdown behavior, termination protection, monitoring

18

![](images/lecture_11_2/lec_11_2_slide_18_image_1.png)

![](images/lecture_11_2/lec_11_2_slide_18_image_2.png)

![](images/lecture_11_2/lec_11_2_slide_18_image_3.png)

# ##############################################################################
# AWS Instance Type (1)
# ##############################################################################

* AWS Instance Type
- An "instance type" describes the amount of computing power available
- https://aws.amazon.com/ec2/instance-types
- Instance family
  - T: cheap, baseline
  - M: general purpose
  - C: compute optimized
  - R: memory optimized
  - D: storage optimized for HDD
  - I: storage optimized for SSD
  - F: with FPGAs
  - P, G, CG: with GPUs
- E.g., **t2.micro**
  - `t`: instance family (small, cheap)
  - `2`: generation (second)
  - `micro`: size (1 vCPU, 1GB memory)
  - 0.013 USD / hr
- E.g., **m4.large**
  - `m`: general purpose
  - large (2 vCPUs, 8GB memory)
  - 0.14 USD / hr

19

![](images/lecture_11_2/lec_11_2_slide_19_image_1.png)

![](images/lecture_11_2/lec_11_2_slide_19_image_2.png)

# ##############################################################################
# AWS Instance Type (2)
# ##############################################################################

* AWS Instance Type
- Price on AWS website is somehow unclear (duh really?)
  - Burst mode
  - vCPUs
  - Multi-tenancy
  - On-demand vs spot vs reserved vs pre-paid
  - 642 types of machines (as of 2023)
  - From 37 USD / yr to 1.91M USD / yr (500 CPUs and 24TB of mem)
- Alternative sites: https://instances.vantage.sh

20

# ##############################################################################
# Starting an EC2 Instance (3)
# ##############################################################################

* Starting an EC2 Instance
- Add storage
  - Volume size
  - Volume type (SSD or magnetic HDDs)
- Tag
- Configure firewall
  - How to access using SSH
  - Select key-pair
- How to monitor the instance
  - E.g. CloudWatch

21

![](images/lecture_11_2/lec_11_2_slide_21_image_1.png)

![](images/lecture_11_2/lec_11_2_slide_21_image_2.png)

# ##############################################################################
# Starting an EC2 Instance (4)
# ##############################################################################

* Starting an EC2 Instance
- Start instance
- Find public IP
- Connect to the machine
**> ssh -i $PATH/mykey.pem ubuntu@$PUBLIC_UP**
**> cat /proc/cpuinfo**
**> free -m**
**> sudo apt-get update**
**> sudo apt-get install ...**

22

![](images/lecture_11_2/lec_11_2_slide_22_image_1.png)

# ##############################################################################
# States of a VM
# ##############################################################################

* States of a VM
- **Start**
  - You can start a stopped VM
- **Stop**
  - A stopped VM is not billed
  - Attached resources (e.g., network HDD) will persist and still incurs in charges
  - Your data storage (local disk) will **not** persist
  - The VM can be restarted later, but on a different host (with different IP)
- **Reboot**
  - Attached resources will persist
  - Your data storage will **not** persist
  - All software still installed after a reboot
  - The VM restarts but on a different host
- **Terminate**
  - It means delete: you cannot restart
  - Data storage is wiped out
  - Attached volumes persist

23

![](images/lecture_11_2/lec_11_2_slide_23_image_1.png)

![](images/lecture_11_2/lec_11_2_slide_23_image_2.png)

# ##############################################################################
# Moving / Upgrading EC2 Instances
# ##############################################################################

* Moving / Upgrading EC2 Instances
- **Scale up / down**
  - If you need more computing power you can increase the size of the VM
  - Stop the VM
  - Change instance type (e.g., m3.large)
  - Start the VM
  - Public and private IP addresses change
- **AWS regions**
  - Each region is a collection of data centers located in the same area
  - Regions are independent from each other
  - Data is not transferred across regions
  - Some AWS services (e.g., IAM, CDN, DNS) act globally
- **Why moving across AWS regions**
  - Different regions have different distance from your users
  - Compliance
    - Are you allowed to store and process data in that country?
  - Service availability
    - Some AWS services are not available in certain regions
  - Redundancy
  - Costs
    - Service costs vary by region
- **Often you want an Elastic IP address to get a fixed public IP**

24
```

```markdown
# ##############################################################################
# Optimizing Costs
# ##############################################################################

* Optimizing Costs
- **On-demand instances**
  - Maximum flexibility, no restrictions
  - You start and stop VMs when you want
  - Pay by hour
- **EC2 / Compute saving plans**
  - 1 yr vs 3 yrs
  - Commit to a certain number of hours
  - Payment options: all, partial, no upfront
  - Discount: up to 3x cheaper than on-demand price
  - Useful for dev servers
- **Capacity reservation**
  - Get machines even in peak hours
- **Spot instances**
  - Bid for unused capacity
  - Price based on supply / demand
  - Discount: up to 10x cheaper than on-demand price
  - Useful for running asynchronous tasks

25

# ##############################################################################
# Programming the Infrastructure
# ##############################################################################

* Programming the Infrastructure
- On AWS *everything* can be controlled via an API over HTTPS
  - Start a VM
  - Create 1TB of storage
  - Start Hadoop cluster
- Jeff Bezos 2002 API mandate
  - An email worth $100B/yr
  - HackerNews
  - An eye-witness from Google about it
- You can use:
  - AWS console
  - HTTP requests to the API
  - CLI (Command Line Interface)
    - Call AWS API from your terminal
  - SDK (Software Development Kit)
    - Call AWS API from your code
  - CloudFormation: templates that describe the state of the infrastructure and are translated into API calls

26

![Programming the Infrastructure](images/lecture_11_2/lec_11_2_slide_26_image_1.png)

**Jeff Bezos 2002 API mandate
**

![Programming the Infrastructure](images/lecture_11_2/lec_11_2_slide_26_image_2.png)

# ##############################################################################
# Infrastructure-As-Code
# ##############################################################################

* Infrastructure-As-Code
- **Use high-level programming language to control IT systems
**
- You can apply software development to infra
  - Code repository
  - Automated tests
  - Continuous integration
- **DevOps (SRE in Google parlance)
**
  - Mix devs and ops in the same team
  - Use software to bring development and operations closer together
  - Switch roles to experience each others’ pain
    - Devs -> responsible for operational tasks (e.g., being on-call)
    - Ops -> involved in software development, making system easier to operate
  - Foster communication and collaboration

27

# ##############################################################################
# Infrastructure-as-Code: Advantages
# ##############################################################################

* Infrastructure-as-Code: Advantages
- **Save time
**
  - Reusing scripts or ready-to-use blueprints
  - Automating tasks done regularly
  - Copy-paste vs click-click-click
- **Fewer mistakes
**
  - Push button flow
- **Consistency of actions
**
  - Multiple deploys per day
- **Deployment pipeline**
  - Commit changes to source code in the repo
  - Application is built from source code
  - Automatic tests (e.g., integration tests)
  - Build testing environment
  - Run acceptance tests in isolation
  - Changes are propagated to production
  - Monitor production
- **The script is a detailed documentation
**
  - It explains what and how, but not why (not a design document)

28

# ##############################################################################
# Create User Account
# ##############################################################################

* Create User Account
- Do not to use AWS root account for all development
- Create a new user
  - IAM = Identity and Access Management
- Access key ID + secret access key
- Access control
  - Enable programmatic access
  - Enable console access
  - Limit what an user can do through policies

29

![Create User Account](images/lecture_11_2/lec_11_2_slide_29_image_1.png)

![Create User Account](images/lecture_11_2/lec_11_2_slide_29_image_2.png)

![Create User Account](images/lecture_11_2/lec_11_2_slide_29_image_3.png)

**Bad idea!**

# ##############################################################################
# AWS Command Line Interface (CLI)
# ##############################################################################

* AWS Command Line Interface (CLI)
- Provide unified interface to all AWS services
- Output is in JSON format
**> apt-get install awscli
**
- Authenticate
**> aws configure**
  - AWS access key ID
    - E.g., **AKIAIRUR3YLPOSVD7ZCA
**
  - AWS secret access key
    - E.g., **SSKIng7jkA...enqBj7**
  - Default region name
    - E.g., **us-east-1
**
- Execute command
**> aws <service> <action> --key value**

30

# ##############################################################################
# Software Development Kit (SDK)
# ##############################################################################

* Software Development Kit (SDK)
- SDK is a library that calls into AWS API from your favorite programming language
  - E.g., Python, Go, Ruby, C++, JavaScript
- **Pros: **it handles
  - Authentication
  - Retry on error
  - HTTPS communication
  - XML / JSON de-/serialization
- **Cons
**
  - Imperative approach
  - Need to deal with dependencies

31

![Software Development Kit (SDK)](images/lecture_11_2/lec_11_2_slide_31_image_1.png)

# ##############################################################################
# AWS CloudFormation
# ##############################################################################

* AWS CloudFormation
- **Use templates (e.g., JSON, YAML) to describe infrastructure
**
- **Declarative vs imperative approach
**
  - Declare the system, rather than listing the steps to build the system
- **AWS Stacks processes CloudFormation templates
**
- **Pros
**
  - Consistent way to describe the infrastructure
    - People implement same thing in a different way
  - Handle dependencies
  - Customizable
    - Inject custom parameters to customize templates
  - Testable
    - Create infra from a template, test, and shut down
  - Updatable
    - If you update the template, Stacks automatically applies changes to the infrastructure
  - It serves as documentation
    - Use it as code in source control

32

# ##############################################################################
# Securing Your System
# ##############################################################################

* Securing Your System
- **Always install software updates
**
  - New security vulnerabilities are found and fixed every day
- **Restrict access to AWS account
**
  - Multiple persons and scripts should use different AWS account
  - Principle of "least privilege": grant only permissions needed to perform a job
- **Restrict network traffic
**
  - Leave open only the ports that you strictly need
    - E.g., 80 for HTTP traffic, 443 for HTTPS
  - Close everything else
  - Encrypt traffic and data
- **Create a private network
**
  - Subnets that are not reachable from the Internet

33

![Securing Your System](images/lecture_11_2/lec_11_2_slide_33_image_1.png)

# ##############################################################################
# AWS Shared-responsibility Principle
# ##############################################################################

* AWS Shared-responsibility Principle
- AWS is responsible for:
  - Protect network through monitoring Internet access
    - E.g., prevent DDoS attacks
  - Ensuring physical security of data centers
  - Decommissioning storage devices after end of life
- You are responsible for:
  - Restrict access using IAM
  - Encrypting network traffic (e.g., HTTPS)
  - Configuring firewall for VPN
  - Encrypting data
  - Updating OS (kernel, libs) and software
- More info here

34
