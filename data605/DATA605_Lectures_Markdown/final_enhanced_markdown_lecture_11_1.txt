::: columns
:::: {.column width=15%}
![](lectures_source/UMD_Logo.png)
::::
:::: {.column width=75%}

\vspace{0.4cm}
\begingroup \large
UMD DATA605 - Big Data Systems
\endgroup
::::
:::

\vspace{1cm}

\begingroup \Large
**Cloud Computing**
\endgroup

::: columns
:::: {.column width=75%}
\vspace{1cm}

**Instructor**: Dr. GP Saggese - `gsaggese@umd.edu`**

**TAs**:
Krishna Pratardan Taduri, kptaduri@umd.edu
Prahar Kaushikbhai Modi, pmodi08@umd.edu

**v1.1**
::::
:::: {.column width=20%}

::::
:::



# ##############################################################################
# Outline (1)
# ##############################################################################

* Outline
- Cloud computing
- Technologies behind cloud computing
  - Data centers
  - Virtualization
  - Programming frameworks
- Challenges and opportunities

© UMD DATA605

2

# ##############################################################################
# Outline (2)
# ##############################################################################

* Outline
- **Cloud computing**
- Technologies behind cloud computing
  - Data centers
  - Virtualization
  - Programming frameworks
- Challenges and opportunities

© UMD DATA605

3

# ##############################################################################
# Cloud Computing (1)
# ##############################################################################

* Cloud Computing
- **Computing as “service” rather than “product”**
  - Everything happens in the cloud: both storage and computing
  - Edge devices (e.g., phones, laptops, tablets) simply interact with the cloud
- **Advantages of cloud computing**
  - Device agnostic: computation can seamlessly move from one device to other
  - On demand
  - Efficiency / scalability
    - Programming frameworks (e.g., Hadoop, Spark, Dask) allow “easy” scalability
  - Reliability
  - Cost: “pay-as-you-go” allows renting computing resources as needed
    - Cheaper (?) than building your own systems
    - Computing as a commodity (like electricity)

© UMD DATA605

4

![](images/lecture_11_1/lec_11_1_slide_4_image_1.png)

# ##############################################################################
# Building vs Renting (1)
# ##############################################################################

* Building vs Renting
- **Building / buying infrastructure**
  - Require time and capital investments (Capex)
    - Especially at the beginning when there aren’t revenues
    - A smooth cash flow (constant $/mo) is better than lumpy one (big one-time purchase)
  - Buy hardware (e.g., computers, storage, network)
    - How do you estimate the size of your hardware for today?
    - Even more difficult to estimate future demands
  - Update hardware when it becomes obsolete
  - Cost of owning hardware (Opex)
    - E.g., data center, electricity, cooling, handling faulty
  - Administering
    - Installing, updating, maintaining software stack

5

© UMD DATA605

# ##############################################################################
# Building vs Renting (2)
# ##############################################################################

* Building vs Renting
- **Cloud computing**
  - Pay for what you use
    - Low initial capital investment
  - Get your systems ready with a click on a web-site
  - No need to estimate a multi-year resource plan
  - Pick machines that suit your application and data requirements

6

© UMD DATA605

# ##############################################################################
# Cloud Computing (2)
# ##############################################################################

* Cloud Computing
- **Basic ideas of cloud computing around for a long time**
  - Mainframes + thin clients (1960s)
  - Personal computers (1980s)
  - Grid computing for supercomputers (1990s)
  - Peer-to-peer architecture (early 2000s)
  - Client-server model (Web 1.0 and Web 2.0)
  - Cloud computing (2010s)
- **It finally works**
- **Why now? A convergence of several key technologies over the last few years**
  - OS virtualization
  - Large data centers
  - Decreasing hardware costs
  - Big data frameworks

© UMD DATA605

7

![](images/lecture_11_1/lec_11_1_slide_7_image_1.png)

![](images/lecture_11_1/lec_11_1_slide_7_image_2.png)

![](images/lecture_11_1/lec_11_1_slide_7_image_3.png)

# ##############################################################################
# X-as-a-Service (1)
# ##############################################################################

* X-as-a-Service
© UMD DATA605

8

![](images/lecture_11_1/lec_11_1_slide_8_image_1.png)

**Infrastructure-as-a-service (IaaS)**
- Cloud provides low-level resources
- You install and maintain OS and applications
- E.g., AWS EC2
**Platform-as-a-service (PaaS)**
- Cloud provides OS and programming languages
- You build application on top of it
- E.g., Google App engine, managed Hadoop
**Software-as-a-service (SaaS)**
- Cloud provides the application
- You use it
- No need to install anything on your machine
- E.g., Dropbox, Salesforce, any app running in a browser
```

```markdown
# ##############################################################################
# X-as-a-Service (2)
# ##############################################################################

* X-as-a-Service
© UMD DATA605

9

**... XaaS**
- Business model of “Anything-as-a-service” (2010s)
- Desktop-as-a-service (e.g., AWS app)
- Mobility-as-a-service (e.g., Uber)
- Games-as-a-service (e.g., Google Stadia)
- Storage-as-a-service (e.g., S3, Google Drive)
- Marketing-as-a-service
- Banking-as-a-service, ...

# ##############################################################################
# Platform-as-a-Service
# ##############################################################################

* Platform-as-a-Service
© UMD DATA605

10

![](images/lecture_11_1/lec_11_1_slide_10_image_1.png)

- **Problem: assembling your own software stack requires work**
- Install
- Configure
- Manage dependencies
- Incompatible versions
  - **Solution: get a pre-built software stack**
- Pre-installed OS
- Libraries
- Application software
- As a virtualization solution
  - E.g., VMware or Docker
  - The software stack comes as a large file with the image of the system
  - **Business model built around this**
- E.g., pre-built images for Hadoop
  - E.g., Hortonworks, Cloudera
- E.g., pre-built distributions for Linux
  - RedHat, Gentoo, CentOS

# ##############################################################################
# Different Cloud Computing Layers‏
# ##############################################################################

* Different Cloud Computing Layers‏
11

From Dr. Mehmet Gunes, U. Nevada Reno

© UMD DATA605

# ##############################################################################
# Cloud Computing Service Layers
# ##############################################################################

* Cloud Computing Service Layers
**Description**

**Services – Complete business services (e.g., PayPal, OpenID, OAuth, Google Maps, Alexa)**

**Services**

**Application** **Focused**

**Infrastructure**
**Focused**

**Application – Cloud based software that eliminates the need for local installation (e.g., Google Apps, Microsoft Office 365)**

**Storage – Data storage or cloud based NAS (e.g., AWS S3, Apple iCloud, CloudNAS, CTERA)**

**Development – Software development platforms used to build custom cloud based applications (PAAS & SAAS), e.g., SalesForce**

**Platform – Cloud based platforms, typically provided using virtualization (e.g., Amazon EC2, Google Compute)**

**Hosting – Physical data centers (e.g., IBM, HP, DigitalOcean)**

12

From Dr. Mehmet Gunes, U. Nevada Reno

© UMD DATA605

# ##############################################################################
# Cloud Types
# ##############################################################################

* Cloud Types
© UMD DATA605

13

![](images/lecture_11_1/lec_11_1_slide_13_image_1.png)

# ##############################################################################
# Outline (3)
# ##############################################################################

* Outline
- Cloud Computing
- Technologies behind cloud computing
  - **Data centers**
  - Virtualization
  - Programming Frameworks
- Challenges and opportunities

© UMD DATA605

14

# ##############################################################################
# Data Centers (1)
# ##############################################################################

* Data Centers
- Data centers are key infrastructure piece that enables cloud computing
  - Every large company (e.g., AWS, Apple, Google, Facebook) is building data centers around the world
- Huge amount of work on deciding how to build / design them
- Research on how to save energy to power and cool data centers

![](images/lecture_11_1/lec_11_1_slide_15_image_1.png)

© UMD DATA605

15

![](images/lecture_11_1/lec_11_1_slide_15_image_2.png)

![](images/lecture_11_1/lec_11_1_slide_15_image_3.png)

![](images/lecture_11_1/lec_11_1_slide_15_image_4.png)

# ##############################################################################
# Data Centers (2)
# ##############################################################################

* Data Centers
- **Equipment cost**
  - E.g., computing, memory, storage, networking
  - A data center costs around 1B USD
  - Very expensive, but prices keep dropping
- **Powering / cooling cost**
  - Cost of running the equipment
  - Cost of cooling is quite high
    - Both have led to focus on “energy-efficient computing”
  - Appropriate placement of vents is a key issue
    - Thermal hotspots often appear and need to worked around
  - PUE (Power Usage Effectiveness)
    - Measure of how much power is converted in computation, the rest is overhead
  - Hard to optimize in small data centers
    - Ideally PUE should be 1, currently numbers are around 1.07-1.22
    - May lead to very large data centers in near future (already happening)

© UMD DATA605

16

![](images/lecture_11_1/lec_11_1_slide_16_image_1.png)

Meta investment in 18 data centers

![](images/lecture_11_1/lec_11_1_slide_16_image_2.png)
```

```markdown
# ##############################################################################
# Data Centers (3)
# ##############################################################################

* Data Centers
© UMD DATA605

17

![](images/lecture_11_1/lec_11_1_slide_17_image_1.png)

![](images/lecture_11_1/lec_11_1_slide_17_image_2.png)

![](images/lecture_11_1/lec_11_1_slide_17_image_3.png)

# ##############################################################################
# (Modular) Data Centers
# ##############################################################################

* (Modular) Data Centers
From James Hamilton Presentation

© UMD DATA605

18

![](images/lecture_11_1/lec_11_1_slide_18_image_1.png)

# ##############################################################################
# Amazon Web Services
# ##############################################################################

* Amazon Web Services
© UMD DATA605

19

As of 2022, 28 geographical regions

![](images/lecture_11_1/lec_11_1_slide_19_image_1.png)

# ##############################################################################
# Amazon Web Services (EC2)
# ##############################################################################

* Amazon Web Services (EC2)
- The most widely used current solution to cloud computing
  - However alternatives are attractive depending on your needs
  - Current prices are very “low” and likely to remain that way due to competition
  - See https://aws.amazon.com/ec2/pricing/on-demand/ for current on-demand pricing

![](images/lecture_11_1/lec_11_1_slide_20_image_1.png)

© UMD DATA605

20

![](images/lecture_11_1/lec_11_1_slide_20_image_2.png)

![](images/lecture_11_1/lec_11_1_slide_20_image_3.png)

# ##############################################################################
# Amazon S3
# ##############################################################################

* Amazon S3
- Amazon storage services (Simple Storage Solution)
  - Pay for what you use

© UMD DATA605

21

|        | S3 Default | S3 RRS | S3 IA | Glacier |
|---------|---------|---------|---------|---------|
| Durability | 99.999999999% | 99.99% | 99.999999999% | 99.999999999% |
| Availability | 99.99% | 99.99% | 99.9% | 99.99% |
| Extra Fees * | None | None | Retrieval | Retrieval |
| Real-Time Access? | Yes | Yes | Yes | No (mins/hours) |
| Frequently Accessed? | Yes | Yes | No | No |

**S3 Storage Types**

# ##############################################################################
# Google App Engine
# ##############################################################################

* Google App Engine
- Google Compute Engine (IaaS)
  - Directly compete with AWS EC2
- Google infrastructure (PaaS)
  - Run Docker container on Google resources
  - Managed services (e.g., SQL and NoSQL DBs)
- Google Docs (SaaS)
  - Share documents in the cloud
  - E.g., word processor, spreadsheet, presentations
- Google cloud computing market share
  - Built software infrastructure / data centers before Amazon
  - Invented many cloud technologies (e.g., Google File System, MapReduce, BigTable)
  - Market share is 3x smaller than AWS
  - Issues:
    - Developer / customer unfriendliness
    - (Often) lack of commitment (Killed by google)
    - No (or horrible) customer service

© UMD DATA605

22

![](images/lecture_11_1/lec_11_1_slide_22_image_1.png)

# ##############################################################################
# Outline (4)
# ##############################################################################

* Outline
- Cloud Computing
- Technologies behind cloud computing
  - Data centers
  - **Virtualization**
  - Programming frameworks
- Challenges and opportunities

© UMD DATA605

23

# ##############################################################################
# Virtualization (1)
# ##############################################################################

* Virtualization
- **Virtual machines have been around for a long time**
  - E.g., running Windows inside a Mac
  - Used to be very slow (e.g., QEMU)
- **Only recently (~2000s) became efficient enough for cloud computing**
- **Basic idea of cloud computing**
  - Run virtual machines on your servers and sell time on them
  - E.g., Amazon EC2, Microsoft Azure, Google Cloud
- **Many advantages**
  - Security: virtual machines have almost impenetrable boundary
  - Multi-tenancy: can have multiple VMs on the same server
  - Efficiency: replace many underpowered machines with fewer high-powered machines

© UMD DATA605

24
```

```
# ##############################################################################
# Virtualization (2)
# ##############################################################################

* Virtualization
![alt text](images/lecture_11_1/lec_11_1_slide_25_image_1.png)
- **Consumer / desktop virtualization**
  - E.g., VMWare, Xen, VirtualBox
  - Run on top of host OS
  - Hypervisor / VM supports guest OS in virtual environment
- **Server virtualization**
  - Run hypervisor directly on top of hardware
  - Good for server farms, like in cloud computing
  - Amazon used Xen on RedHat machines
  - Now custom hardware AWS Nitro
  - Support Windows and Linux Virtual Machines

© UMD DATA605

25

![alt text](images/lecture_11_1/lec_11_1_slide_25_image_2.png)

# ##############################################################################
# Virtualization (3)
# ##############################################################################

* Virtualization
- Performance and tricky things to keep in mind
  - Hard to reason about performance (if you care)
  - Identical VMs may deliver somewhat different performance
    - E.g., multi-tenancy, different hardware
- “Bare-metal” compute to improve performance

© UMD DATA605

26

# ##############################################################################
# Docker
# ##############################################################################

* Docker
- Enable true independence between application devs and IT ops
- Package all the dependencies
- Advantages
  - Containers are fast and portable
  - Reduce overhead of virtualization
  - Containers don’t require full-blown OS
  - All containers run on a single host
  - Reduce OS licencing cost
  - Reduce overhead of OS maintenance

© UMD DATA605

27

![alt text](images/lecture_11_1/lec_11_1_slide_27_image_1.png)

![alt text](images/lecture_11_1/lec_11_1_slide_27_image_2.png)

# ##############################################################################
# Outline (5)
# ##############################################################################

* Outline
- Cloud Computing
- Technologies behind cloud computing
  - Data centers
  - Virtualization
  - **Programming frameworks**
- Challenges and opportunities

© UMD DATA605

28

# ##############################################################################
# Programming Frameworks
# ##############################################################################

* Programming Frameworks
- **Programming frameworks emerged from efforts to “scale out” workloads**
  - Distribute work over large numbers of machines (thousands of machines)
- Parallelism has been around for a long time
  - Both in a single machine and as a cluster of computers
- Parallelism is very hard for programmers
  - Many things to keep track of:
    - How to parallelize application
    - How to distribute the data
    - How to handle failures
    - Debugging
    - Race conditions/Heisenbugs
    - ...
- **The difference is the user interface**
  - Google developed MapReduce and BigTable frameworks and started a new era
    - Hadoop, Spark
  - AWS services

© UMD DATA605

29

# ##############################################################################
# MapReduce Framework
# ##############################################################################

* MapReduce Framework
- Provide a fairly restricted, but still powerful abstraction for programming distributed workloads
- Programmers only write functions called *map* and *reduce*
  - **map** programs
    - inputs: a list of “records” (e.g., images, genomes)
    - output: for each record, produce a set of **(key, value)** pairs
  - **reduce** programs
    - input: a list of **(key, [values])** grouped together from the mapper
    - output: whatever
  - Both can do arbitrary computations on the input data as long as the basic structure is followed
- Everything else (e.g., task scheduling, fault tolerance) is taken care of by the framework
- **Batch processing of data**
  - MapReduce and other analytics frameworks are great
- **Streaming data**
  - Very large-scale applications that need real-time access with few ms latencies
  - Trade-off between “consistency” and “performance”

© UMD DATA605

30

# ##############################################################################
# Other Programming Frameworks
# ##############################################################################

* Other Programming Frameworks
- Many different programming frameworks suitable for different applications
  - Address limitations of MapReduce-based platforms
- **High-performance Computing (HPC) Systems**
  - Cluster of supercomputers (instead of cheap computers)
  - E.g., GridRPC, MPI
  - More expressive and complex, but a lot more efficient
- **Spark**
  - Based on Resilient Distributed Data (RDD)
  - All in-memory, much more efficient
  - Uses Scala, Python, Java for programming
- **Apache Hive**
  - SQL-like interface on top of Hadoop / HDFS, originally from Facebook
- **Apache HBase**
  - NoSQL column oriented DB
  - Random read/write very large tables (like SQL) on top of Hadoop / HDFS
  - Modeled after Google BigTable
- **Apache Storm, Spark Streaming**
  - Focused on handling real-time streaming data
- **Giraph, GraphLab, GraphX**
  - Graph processing systems

© UMD DATA605

31

# ##############################################################################
# Outline (6)
# ##############################################################################

* Outline
- Cloud computing
- Technologies behind cloud computing
  - Data centers
  - Virtualization
  - Programming frameworks
- **Challenges and opportunities**

© UMD DATA605

32
```

```
# ##############################################################################
# Advantages of Cloud Computing (1)
# ##############################################################################

* Advantages of Cloud Computing
- **Lower edge computer costs**
  - Since applications run in the cloud, desktop does not need processing power / memory / disk demanded by traditional desktop software
- **Improved performance of desktop**
  - Better performance / faster system boot for your desktop due to large programs hogging your computer's memory
- **Device independence**
  - You are no longer tethered to a single computer
  - Applications and documents follow you through the cloud
  - Move to another (maybe portable) device and your applications and documents are still available
- **Reduced software costs**
  - Instead of purchasing expensive software applications, you can get most of what you need for free(-ish)
    - Google Docs suite vs Microsoft
    - Most applications are cloud based today
  - Rent (monthly payments) instead of buying

© UMD DATA605

33

# ##############################################################################
# Advantages of Cloud Computing (2)
# ##############################################################################

* Advantages of Cloud Computing
- **Instant software updates**
  - No longer faced with choosing between obsolete software and high upgrade costs
  - When the application is web-based, updates happen automatically
    - Available the next time you log into the cloud
    - You get the latest version without needing to pay for or download an upgrade
  - Docker or VMs can package software to run on any platform that supports virtualization
- **Improved document format compatibility**
  - Do not have to worry about the documents on your machine being compatible with other users' applications or OSes
  - Potentially no format incompatibilities when everyone is sharing documents in the (same) cloud

© UMD DATA605

34

# ##############################################################################
# Advantages of Cloud Computing (3)
# ##############################################################################

* Advantages of Cloud Computing
- **“Unlimited” storage capacity**
  - Cloud computing offers virtually limitless storage
  - Your computer has ~1TB hard drive
  - Hundreds of PBs available in the cloud (elastic and on-demand)
- **Increased data reliability**
  - Hard disk can crash and destroy all your valuable data of your desktop computer
  - Few individual users backup their data on a regular basis
  - A computer crashing in the cloud does not affect the storage of your data
    - All your data is still out there in the cloud, still accessible
    - Cloud computing is a data-safe computing platform

© UMD DATA605

35

# ##############################################################################
# Advantages of Cloud Computing (4)
# ##############################################################################

* Advantages of Cloud Computing
- **Universal document access**
  - Documents stay in the cloud
  - Documents are instantly available from wherever you are
  - As long as you have an Internet connection
- **Latest version availability**
  - When you edit a document at home, that edited version is what you see when you access the document at work
  - The cloud always hosts the latest version of your documents
  - Built-in revision control system
- **Easier collaboration**
  - Sharing documents leads directly to better collaboration
  - Multiple users can collaborate easily on documents and projects

© UMD DATA605

36

# ##############################################################################
# Disadvantages of Cloud Computing (1)
# ##############################################################################

* Disadvantages of Cloud Computing
- **Using cloud computing means dependence on Big Tech**
  - Big Internet companies like AWS, Google, and Microsoft monopolise the market
  - Can possibly limit flexibility and innovation
  - Lots of competition in cloud computing
  - High barriers to break into the cloud computing market
- **Security is an issue**
  - Unclear how safe outsourced data is
  - Ownership of data is not always clear
- **Issues relating to policy and access**
  - If your data is stored abroad whose policy do you adhere to?
    - To deal with government restrictions (e.g., export restrictions), cloud providers ensure your data is stored within your country’s borders
    - E.g., TikTok saga
  - What happens if the remote server goes down?
    - How will you then access files?
  - Cases of users being locked out of accounts and losing access to data

© UMD DATA605

37

# ##############################################################################
# Disadvantages of Cloud Computing (2)
# ##############################################################################

* Disadvantages of Cloud Computing
- **Requires a constant Internet connection**
  - Without an Internet connection you cannot access anything, applications or your own documents
  - No Internet means no work: this could be a deal-breaker
    - Many applications offer off-line capabilities
- **Does not work well with low-speed / spotty connections**
  - Low-speed Internet connection makes cloud computing painful or impossible
  - Web-based applications require a lot of bandwidth to download
- **Web-interface can be slow**
  - Even with a fast connection, web-based applications are often slower than your desktop
  - Interface (not data) is sent back and forth from your computer to the computers in the cloud
  - Latency (more than throughput) matters

© UMD DATA605

38

# ##############################################################################
# Disadvantages of Cloud Computing (3)
# ##############################################################################

* Disadvantages of Cloud Computing
- **Features might be limited**
  - Many web-based applications simply are not as full-featured as their desktop-based applications
  - For example, you can still do a lot more with Microsoft PowerPoint than with Google Slides
  - This situation is changing rapidly
- **Stored data might not be secure**
  - With cloud computing, all your data is stored on the cloud
  - How secure is the cloud?
    - Probably more secure than your laptop
  - Can unauthorized users gain access to your confidential data?
    - News are data leaks are constant
- **Stored data can be lost**
  - Data stored in the cloud is safe, replicated across multiple machines (theoretically)
  - Doing local backups might still be a good idea

© UMD DATA605

39

# ##############################################################################
# Disadvantages of Cloud Computing (4)
# ##############################################################################

* Disadvantages of Cloud Computing
- **HPC systems**
  - Unclear if you can run compute-intensive HPC applications that use MPI or OpenMP
  - Need low-latency, high-bandwidth interconnect
  - Scheduling is important with this type of application
  - All nodes should be co-located to minimize communication latency
  - This has changed (e.g., MapReduce, AWS EC2) and is still changing
- **Interoperability**
  - Each cloud systems uses different protocols and different APIs
  - May not be possible to run applications across different cloud-based systems
  - Solution: indirection layer (Terraform, Ansible)

© UMD DATA605

40
