# ##############################################################################
# Data Models
# ##############################################################################

- Data modeling represents and captures the structure and properties of
  real-world entities, serving as an abstraction to transform these elements
  into a computer-friendly format

- A data model defines data representation and access, such as relational models
  organizing data into tables or key-value models storing data as pairs

- Data models are crucial because:
  - They clarify data structure, aiding in writing general-purpose code
  - They enable data sharing across programs, organizations, and systems
  - They integrate information from various sources and preprocess data for
    efficient access, like building an index Now, let's explore the layers of
    data modeling to understand data structuring and access

# ##############################################################################
# Multiple Layers of Data Modeling
# ##############################################################################

- The physical layer deals with how data is physically stored. It involves
  representing complex data structures, like using B-trees for indexing, which
  helps in efficiently accessing and managing data.

- The logical layer focuses on entities, attributes, and the type of information
  stored. It also defines the relationships among these elements, providing a
  clear structure of how data is organized and related.

- Views are used to restrict information flow, enhancing security and ease of
  use. They allow users to see only the data they need, without exposing the
  entire database.

Let's explore the logical layer in more detail to understand its components and
functions.

# ##############################################################################
# Data Models: Logical Layer
# ##############################################################################

- Modeling constructs represent data structure, including entity types (what
  data is about), entity attributes (properties of entities), and relationships
  (connections between data elements)

- Integrity constraints are rules ensuring data integrity, preventing errors and
  inconsistencies. For instance, a field might need to be non-empty or contain
  an integer

- Manipulation constructs involve operations like inserting, updating, or
  deleting data

Understanding these layers and constructs is crucial for effective data
management and utilization.

# ##############################################################################
# Examples of Data Models
# ##############################################################################

- This slide introduces various data models used in data management and
  processing
- The relational model, linked with SQL, organizes data into tables and is widely
  used
- The entity-relationship (ER) model aids in database design by defining entities
  and their relationships
- XML is a markup language for representing complex data hierarchically
- Object-oriented (OO) models, akin to object-oriented programming, represent
  data with complex interrelationships.
- Object-relational models merge relational and object-oriented features for
  flexibility
- RDF (Resource Description Framework) represents web resource information, while
  property graphs model data as nodes and edges, useful for network data

- Serialization formats like CSV, Parquet, JSON, Protocol Buffer, Avro/Thrift,
  and Python Pickle are also data models, defining data structure and storage.
  - CSV is simple for tabular data; Parquet is optimized for big data performance.
  - JSON is a lightweight data interchange format
  - Protocol Buffer is a language-neutral, platform-neutral format for structured
    data serialization.
  - Avro and Thrift are similar to Protocol Buffer but with distinct features and
    use cases
  - Python Pickle is specific to Python for serializing and deserializing Python
    objects

Now, let's explore what makes a data model effective.

# ##############################################################################
# Good Data Models
# ##############################################################################

- A good data model should be expressive, accurately capturing real-world data
  complexities
- It must be user-friendly, enabling interaction without unnecessary complexity
- Performance is crucial, ensuring efficient data processing and retrieval
- There's often a trade-off: powerful models can handle diverse datasets but may
  be harder to use and require more resources like memory and processing time
- Data modeling tools have evolved to capture various data structures.
  Structured data, highly organized and searchable, is managed with relational
  databases. Semi-structured data, like web data, uses flexible formats like XML
  and JSON. Unstructured data, lacking a predefined format, is managed by NoSQL
  databases, designed for large volumes of diverse data types

Next, we'll discuss the concept of data independence and its importance in data
management.

# ##############################################################################
# Data Independence
# ##############################################################################

- Data independence is vital in database management, enabling data representation
  changes without affecting applications

- Logical data independence allows altering the logical schema, like database
  structure, without changing data-accessing programs. This is achieved through
  APIs that abstract data structures, letting developers modify the data model
  without impacting applications

- Physical data independence involves altering the data's physical disk layout
  without affecting programs. This includes indexing for better search
  performance, partitioning or distributing data for scalability, replicating for
  redundancy, compressing to save space, and sorting to optimize queries

# ##############################################################################
# Databases: A Brief History
# ##############################################################################

- In the 1960s, computers gained popularity, and businesses began adopting them.
  Each application had its own data storage method, making data inaccessible to
  other programs
- This led to the database concept, a shared data repository for multiple
  applications. The goal was to have a defined data format, stored as a "data
  dictionary" or schema, accessed via database management software
- However, challenges arose, including writing data dictionaries, accessing
  data, and controlling it. Concerns about data integrity, security, and privacy
  also emerged

# ##############################################################################
# Databases: A Brief History
# ##############################################################################

- In the 1960s, hierarchical and network models emerged to connect various record
  types, like linking customer and account records. The network model offered
  more generality and flexibility. IBM's IMS Hierarchical Database, developed in
  1966 for the Apollo program, marked a major advancement. Prevalent before hard
  disks, it became widely adopted, with over 95% of Fortune 1000 companies using
  it. It processes 50 billion transactions daily and manages 15 million gigabytes
  of data. However, these models had limitations, such as exposing too much
  internal data and having leaky abstractions, revealing excessive details about
  data organization

# ##############################################################################
# Relational, Hierarchical, Network Model
# ##############################################################################

- The relational model represents data as tuples in tables, using SQL for
  management and queries
- The hierarchical model organizes data in a tree structure, with each parent
  having multiple children linked together. It gained popularity again in the
  1990s with XML databases
- The network model structures data as a graph, allowing multiple parents and
  children. It saw renewed interest in the 2010s with graph databases
- Each model has unique strengths and weaknesses. The relational model is
  praised for simplicity and ease of use, while hierarchical and network models
  provide flexibility for complex data relationships

# ##############################################################################
# Databases: A Brief History
# ##############################################################################

- In the 1970s, Ted Codd introduced the relational model, grounded in set theory
  and first-order predicate logic. This model offered a formal method to manage
  data, emphasizing data independence, allowing users to focus on data
  manipulation without concern for storage or processing. It introduced SQL, a
  high-level query language based on relational algebra, simplifying data
  querying and manipulation. The model also introduced normal forms, aiding in
  understanding data relationships and eliminating redundancies

- Projects like INGRES from UC Berkeley and System R from IBM were pivotal in
  advancing relational databases, despite not being compatible with the earlier
  IMS database system. This era saw debates between advocates of the relational
  model and supporters of the network model, another database management
  approach

# ##############################################################################
# Entity-Relationship Model
# ##############################################################################

- In 1976, Peter Chen introduced the Entity-Relationship (ER) Model, which
  provided a new way to describe data. This model uses entities and relationships
  to represent knowledge. Entities are essentially the "nouns" of the data world,
  representing physical or logical objects. Relationships, on the other hand, are
  the "verbs," showing how entities are connected

- The ER model is particularly useful because it can be easily mapped to a
  relational database, where entities and relationships are translated into
  tables. This mapping makes it easier to design databases that accurately
  reflect real-world scenarios. The visual representation of the ER model, often
  through diagrams, helps in understanding the structure and relationships within
  the data

- This model has become a fundamental part of database design, providing a clear
  and organized way to represent complex data systems.

# ##############################################################################
# Databases: A Brief History
# ##############################################################################

- In the 1980s, the relational model became widely accepted, thanks to IBM's
  support and SQL standardization. Enhancements included set-valued attributes
  and aggregation functions, broadening its capabilities

- By the late 1980s, object-oriented databases emerged, storing objects instead
  of tables to resolve the impedance mismatch with programming languages. This
  mismatch complicated integration with object-oriented languages. Concurrently,
  object-relational databases appeared, merging object-oriented benefits with the
  relational model. They introduced user-defined types for complex data
  structures. Despite these advancements, the core principles of the relational
  model remained unchanged. This era marked a pivotal evolution in database
  zz
  technology, paving the way for future data management system developments

# ##############################################################################
# Object-Oriented
# ##############################################################################

- Object-oriented programming (OOP) models data using objects with fields for
  data and methods for behavior. It organizes code by grouping related data and
  functions
- Composition in OOP involves "has-a" relationships, where one class contains
  another, like an Employee class containing an Address class.
- Inheritance represents "is-a" relationships, allowing a class to inherit
  properties and methods from another, such as an Employee class inheriting from
  a Person class
- Polymorphism lets objects be treated as instances of their parent class,
  enabling one interface to have multiple implementations. For example, a draw()
  method may act differently for a Circle and a Square, both derived from a Shape
  class
- Encapsulation restricts access to certain object parts using private and public
  fields, preventing external code from altering an object's internal state, thus
  promoting modularity and security

# ##############################################################################
# Databases: A Brief History
# ##############################################################################

- In the late 1990s, the web and internet began to shape how we handle data
- XML, or eXtensible Markup Language, emerged as a tool for managing
  semi-structured data. XML uses a tree-like structure, which allows for a
  flexible schema. This means you can define data structures that can easily
  adapt to changes without breaking existing systems. XML's flexibility made it
  popular for data exchange over the internet
- For example, a catalog of CDs can be represented in XML, with each CD having
  attributes like title, artist, country, company, price, and year. This format
  allows for easy sharing and updating of data across different platforms and
  systems.

# ##############################################################################
# Resource Description Framework
# ##############################################################################

- The Resource Description Framework, or RDF, is a method for representing
  information about resources in the web
- It uses a simple structure called "subject-predicate-object" triples. For
  example, "sky has-the-color blue" is a triple where "sky" is the subject,
  "has-the-color" is the predicate, and "blue" is the object
- RDF maps these triples to a labeled, directed multi-graph, which is more
  general than a tree structure
- This flexibility allows RDF to represent complex relationships between data
  points. RDF data can be stored in relational databases or specialized
  "triple-stores" databases designed to handle RDF data. The example provided
  shows RDF triples in action, where each line represents a relationship between
  resources, such as a person knowing another person or having a birth date. RDF
  is crucial for linking data across different domains and making it accessible
  and understandable on the web.

# ##############################################################################
# Property Graph Model
# ##############################################################################

- A graph consists of vertices (nodes) and edges (connections). In the property
  graph model, both vertices and edges have properties, which are key-value
  pairs storing extra information about nodes and their relationships. This
  enables a detailed data representation, as each graph element can have
  attributes describing its characteristics or connection nature

- Property graphs can be stored in various databases. Relational databases,
  typically used for structured data, store graphs using tables for nodes and
  edges with properties. However, this may not be efficient for complex graph
  operations. Graph databases, designed for graph structures, offer better
  storage and querying for graph data, making them ideal for applications
  relying on graph-based models

- Understanding the property graph model is vital for applications with complex
  relationships and interconnected data, like social networks, recommendation
  systems, and network analysis. By utilizing node and edge properties, more
  sophisticated queries and analyses can be performed, leading to deeper
  insights and more effective decision-making
