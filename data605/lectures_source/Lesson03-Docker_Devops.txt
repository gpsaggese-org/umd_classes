// https://docs.google.com/presentation/d/1VoUmig6CIA4ZtfNAuAIKbr3qtZjYNWIZxK9xxK6wTxI/edit

::: columns
:::: {.column width=15%}
![](data605/lectures_source/images/UMD_Logo.png)
::::
:::: {.column width=75%}

\vspace{0.4cm}
\begingroup \large
UMD DATA605 - Big Data Systems
\endgroup
::::
:::

\vspace{1cm}

\begingroup \Large
**$$\text{\blue{DevOps with Docker}}$$**
\endgroup

::: columns
:::: {.column width=75%}
\vspace{1cm}

**Instructor**: Dr. GP Saggese - `gsaggese@umd.edu`

::::
:::: {.column width=20%}

::::
:::

* Docker - Resources

// TODO(gp):
:::columns
::::{.column width=70%}
- We will use Docker during the class project and most tutorials

- Concepts in the slides
- Class tutorials:
  - [tutorial_docker](https://github.com/gpsaggese/umd_classes/tree/master/data605/tutorials/tutorial_docker)
  - [tutorial_docker_compose](https://github.com/gpsaggese/umd_classes/tree/master/data605/tutorials/tutorial_docker_compose)
- Web resources:
  - [Docker Tutorial for beginners](https://www.youtube.com/watch?v=zJ6WbK9zFpI)
  - [https://labs.play-with-docker.com/](https://labs.play-with-docker.com/)
  - [https://training.play-with-docker.com](https://training.play-with-docker.com)
  - [A Beginner-Friendly Introduction to Containers, VMs and Docker](https://medium.freecodecamp.org/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b)
  - [Official Docker Getting Started Tutorial](https://docs.docker.com/get-started/)
- Mastery:
  - Poulton, [Docker Deep Dive: Zero to Docker in a single book](https://www.amazon.com/Docker-Deep-Dive-Nigel-Poulton/dp/1521822808), 2020

::::
::::{.column width=25%}
\vspace{2cm}
![](data605/lectures_source/images/lecture_3/lec_3_slide_3_image_1.png)
::::
:::

* Application Deployment
- **For (almost all) Internet companies, the application is the business**
  - If the application breaks, the business stops working
  - E.g., Amazon, Google, Facebook, on-line banks, travel sites (e.g., Expedia),
    ...
- **Problem**
  - How to release / deploy / manage / monitor applications?
- **Solutions**
  - Before 2000s: "bare-metal era"
  - 2000s-2010s: "virtual machine era"
  - After ~2013: "container era"

* DevOps

:::columns
::::{.column width=65%}
- **DevOps** = set of practices that combines:
  - Software development (_dev_)
  - IT operations (_ops_)
- **Containers revolutionized DevOps**
  - Enable true independence between application development and IT ops
    - One team creates an application
    - Another team deploys and manages the applications
  - Create a model for better collaboration (fewer conflicts) and innovation
    - IT: "It doesn't work!"
    - Devs: "What? It works for me"

::::
::::{.column width=35%}

![](data605/lectures_source/images/lecture_3/lec_3_slide_5_image_1.png)

\footnotesize
\centering
- Plan
- Code
- Build
- Test
- Release
- Deploy
- Operate
- Monitor
::::
:::

* Run on bare metal
:::columns
::::{.column width=80%}
- **< 2000s**
  - Running one or few applications on each server (without virtualization)
- **Pros**
  - No virtualization overhead
- **Cons**
  - Not safe / not secure since no separation between applications
  - Expensive
- **Expensive / low efficiency**
  - IT would buy a new server for each application
  - Difficult to spec out the machine $\to$ buy "big and fast servers"
    - Overpowered servers operating at 5-10% of capacity
    - Tons of money in the 2000 DotCom boom was spent on machines and networks
- It kind of came back in 2020 but with different use cases in Cloud Computing
- **Winners**: Cisco, Sun, Microsoft
::::
::::{.column width=20%}
\vspace{2.5cm}
![](data605/lectures_source/images/lecture_3/lec_3_slide_6_image_1.png)
::::
:::

* Virtual Machine Era
:::columns
::::{.column width=75%}
- **Circa 2000-2010: Virtual Machine**
  - Virtual machine technology = run multiple copies of OSes on the same hardware
- **Pros**
  - VM runs safely and securely multiple applications on a single server
  - IT could run apps on existing servers with spare capacity
- **Cons**
  - Every VM requires an OS (waste of CPU, RAM, and disk)
  - Buy an OS license
  - Monitor and patch each OS
  - VMs are slow to boot
- **Winners**: VMWare, RedHat, Citrix
::::
::::{.column width=25%}

![](data605/lectures_source/images/lecture_3/lec_3_slide_7_image_1.png)
::::
:::

* Containers Era
:::columns
::::{.column width=60%}
  ... tmp.prettier_on_str.md 22ms
- **Circa 2013: Docker becomes ubiquitous**

- **Docker**
  - Didn't invent containers
  - Made containers simple and mainstream

- Linux supported containers
  - Kernel namespaces
  - Control groups
  - Union filesystems

- **Pros**
  - Containers are fast and portable
  - Don't require full OS
  - All run on a single host
  - Reduce OS licensing cost
  - Reduce OS patching and maintenance
::::
::::{.column width=35%}

![](data605/lectures_source/images/lecture_3/lec_3_slide_8_image_1.png){width=70%}

\vspace{1cm}

![](data605/lectures_source/images/lecture_3/lec_3_slide_8_image_2.png){width=120%}
::::
:::
- **Cons**
  - CPU overhead
  - Toolchain to learn / use

- **Winners**: AWS, Microsoft Azure, Google (not Docker Inc.)

* Serverless Computing
- **Containers run in an OS, OS runs on a host**
  - **Where is the host running?**
    - Local (your laptop)
    - On premise (your computer in a rack)
    - Cloud instance (e.g., AWS EC2)
  - **How is the host running?**
    - On bare-metal server
    - On a virtual machine
    - On a virtual machine running a virtual machine

- **Serverless computing**
  - Application runs without concern for _"how"_ or _"where"_
  - E.g., AWS Lambda

* HW vs OS Virtualization
:::columns
::::{.column width=55%}

- **Hypervisor performs HW virtualization**
  - Carves physical hardware into VMs
  - Allocates CPUs, RAM, storage to a VM
  - Like having multiple computers

- "Virtual machine tax"
  - Running 3 apps requires 3 VMs
    - Each VM takes time to start
    - Consumes CPU, RAM, storage
    - Needs OS license
    - Requires admins, patching
  - You just want to run 3 apps!

\vspace{1cm}
- **Containers perform OS virtualization**
  - It's like having multiple OSes
::::
::::{.column width=40%}

![](data605/lectures_source/images/lecture_3/lec_3_slide_10_image_1.png){width=90%}
\vspace{1cm}
![](data605/lectures_source/images/lecture_3/lec_3_slide_10_image_2.png){width=90%}
::::
:::

* Docker: Client-Server

:::columns
::::{.column width=55%}
- Docker relies on a **client-server architecture**

- **Docker client**
  - Command line interface
  - Communicate with server through IPC socket
    - E.g., **/var/run/docker.sock** or IP port

- **Docker engine**
  - Run and manage containers
  - Modular, built from OCI-compliant sub-systems
    - E.g., docker daemon, `containerd`, `runc`, plug-ins for networking and
      storage
::::
::::{.column width=40%}
![](data605/lectures_source/images/lecture_3/lec_3_slide_11_image_1.png)

\vspace{1cm}

![](data605/lectures_source/images/lecture_3/lec_3_slide_11_image_2.png)
::::
:::

* Docker Architecture

:::columns
::::{.column width=60%}
- **Docker run-time**
  - `runc`: start and stop containers
  - `containerd`
    - Pull images
    - Create containers, volumes, network interfaces

- **Docker engine**
  - `dockerd`
    - Expose remote API
    - Manage images, volumes, networks

- **Docker orchestration**
  - `docker swarm`
  - Manage clusters of nodes
  - Replaced by Kubernetes

- **Open Container Initiative (OCI)**
  - Standardize low-level components of container infrastructure
  - E.g., image format, run-time API
  - "Death" of Docker
::::
::::{.column width=35%}

![](data605/lectures_source/images/lecture_3/lec_3_slide_12_image_1.png)

::::
:::

* Docker Container

- **Docker Container**
  - Unit of computation
  - Lightweight, stand-alone, executable software package
  - Includes everything needed to run, e.g.,
    - Code
    - Runtime/system libraries
    - Settings
  - Run-time object
    - Docker images are build-time objects
    - Like program running (container) vs program code (image)

* Docker Image
- **Docker Image**
  - Unit of deployment
  - Contains everything needed to run an app
    - Application code
    - Application dependencies
    - Minimal OS support
    - File system
  - Users can
    - Build images from Dockerfiles
    - Pull pre-built images from a registry
  - Multiple layers stacked
    - Typically few 100s MBs

* Docker Image Layers
:::columns
::::{.column width=60%}
- **Docker image** is a configuration file listing layers and metadata
  - Composed of read-only layers
  - Each layer is independent
  - Each layer comprises many files

- **Docker driver**
  - Stacks layers as a unified filesystem
  - Implements copy-on-write behavior
  - Files from top layers can obscure files from bottom layers

- **Layer hash**
  - Each layer has a hash based on content
  - Layers are pulled and pushed compressed

- **Image hash**
  - Each image has a hash
  - Hash is a function of the config file and layers
  - Image changes generate a new hash
::::
::::{.column width=35%}

![](data605/lectures_source/images/lecture_3/lec_3_slide_15_image_1.png)

![](data605/lectures_source/images/lecture_3/lec_3_slide_15_image_3.png)

![](data605/lectures_source/images/lecture_3/lec_3_slide_15_image_2.png)

::::
:::

* Docker: Container Data
- A container has access to different data

- **Container storage**
  - Copy-on-write layer in the image
  - Ephemeral (temporary data)
  - Data persists until the container is killed
    - Stopping or pausing a container doesn't lose data
  - Containers are immutable
    - Avoid writing persistent data into containers

- **Bind-mount a local dir**
  - Mount a local dir to a dir inside a container

- **Docker volumes**
  - Volumes exist separately from the container
    - E.g., store Postgres DB content
  - State is permanent across container invocations
  - Shareable across containers

* Docker Repos
:::columns
::::{.column width=55%}
- **Docker Repo (Registry)**
  - E.g., DockerHub, AWS ECR
  - Store Docker images
    - `<registry>/<repo>:<tag>`
    - E.g., `docker.io/alpine:latest`
  - Some repos are vetted by Docker
  - Unofficial repos shouldn't be trusted
  - E.g., https://hub.docker.com/

::::
::::{.column width=40%}

![](data605/lectures_source/images/lecture_3/lec_3_slide_17_image_1.png)
::::
:::

![](data605/lectures_source/images/lecture_3/lec_3_slide_17_image_2.png){width=70%}

* Devops = Devs + Ops
\centering
![](data605/lectures_source/images/lecture_3/lec_3_slide_18_image_1.png){width=50%}

:::columns
::::{.column width=50%}
- **Devs**
- Implement app
  - Python, virtual env
- Containerize app
  - Create Dockerfile
  - Instructions to build image
- Build image
- Run app as container

- Test locally
::::
::::{.column width=50%}
- **Ops**
- Download container images
  - Filesystem, application, dependencies
- Start / destroy containers
- Reproduce issues easily
  - "Here is the log"
  - Run command line
  - Deploy on test system and debug
::::
:::

* Containerizing an App
- Containerizing an app means creating a container with your app inside

- Develop application code with dependencies
  - Install dependencies
    - Inside a container
    - Inside a virtual env

- Create a Dockerfile describing:
  - App
  - Dependencies
  - How to run it

- Build image with `docker image build`
- (Optional) Push image to Docker image registry
- Run/test container from image
- Distribute app as a container (no installation required)

* Building a Container
- **Dockerfile**
  - Describe how to create a container
- **Build context**
  - `docker build -t web:latest .` where `.` is the build context
  - Directory containing the application and what's needed to build it
  - Sent to Docker engine to build the application
  - Typically the Dockerfile is in the root directory of the build context

* Dockerfile: Example
\color{blue}
```docker
FROM python:3.8-slim-buster
LABEL maintainer="gsaggese@umd.edu"

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip3 install -r requirements.txt

COPY . .

CMD ["python3", "-m", "flask", "run", "--host=0.0.0.0"]
```

* Docker: Commands
Show all the available images
\begingroup \footnotesize \color{blue}
```
> docker images 
REPOSITORY              TAG         IMAGE ID          CREATED             SIZE
counter_app-web-fe      latest      4bf6439418a1      17 minutes ago      54.7MB
…
```
\endgroup

Show a particular image
\begingroup \footnotesize \color{blue}
```
\> docker images counter_app_web-fe
counter_app-web-fe      latest      4bf6439418a1      17 minutes ago      54.7MB
…
```
\endgroup
Note that docker images ls is incorrect since it shows the image ls

Delete an image
\begingroup \footnotesize \color{blue}
```
\> docker rmi …
```
\endgroup

Show the running containers
\begingroup \tiny\color{blue}
```
> docker container ls
CONTAINER ID  IMAGE               COMMAND                 CREATED        STATUS        PORTS                   NAMES
505541bcfe8b  counter_app-web-fe  "python app.py"         7 minutes ago  Up 7 minutes  0.0.0.0:5001->5000/tcp  counter_app-web-fe-1
c1889540cfd2  redis:alpine        "docker-entrypoint.sh"  7 minutes ago  Up 7 minutes  6379/tcp                counter_app-redis-1
```
\endgroup

* Docker: Commands
Show running containers
\begingroup \footnotesize \color{blue}
```
> docker container ls
```
\endgroup
\begingroup \tiny \color{blue}
```
CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS        
PORTS                   NAMES
281d654f6b8d   counter_app-web-fe   "python app.py"          5 minutes ago   Up 5 minutes  
0.0.0.0:5001->5000/tcp  counter_app-web-fe-1

de55ae4104da   redis:alpine         "docker-entrypoint.s…" 5 minutes ago  Up 5 minutes  
6379/tcp       counter_app-redis-1
```
\endgroup

Show volumes and networks
\begingroup \footnotesize \color{blue}
> docker volume ls
```
> docker volume ls
DRIVER    VOLUME NAME
local     counter_app_counter-vol

> docker network ls
NETWORK ID     NAME                    DRIVER    SCOPE
b4c1976d7c27   bridge                  bridge    local
33ff702253b3   counter-app_counter-net bridge    local
```
\endgroup

* Docker: Delete state
Commands:
\begingroup \footnotesize \color{blue}
```
> docker container ls
> docker container rm $(docker container ls -q)

> docker images
> docker rmi $(docker images -q)

> docker volume ls
> docker volume rm $(docker volume ls -q)

> docker network ls
> docker network rm $(docker network ls -q)
```
\endgroup

* Docker Tutorial
- tutorial_docker.md

* Docker Compose
- **Manage multi-container apps running on a single node**
  - Describe app in a single *declarative* configuration YAML file
    - Instead of scripts with long Docker commands
  - Compose talks to Docker API to achieve what you requested
  - E.g., you need a client app and Postgres DB
  - E.g., microservices
    - Web front-end
    - Ordering
    - Back-end DB
- In 2020 Docker Compose has become an open standard for "code-to-cloud" process
- **Manage multi-container apps running on multiple hosts**
  - Docker Stacks / Swarm
  - Kubernetes

* Docker Compose: Tutorial Example
:::columns
::::{.column width=60%}
- The default name for a Compose file is `docker-compose.yml`
  - You can specify `-f` for custom filenames
- **Top-level keys** are:
  - `version`:
    - Mandatory first line to specify API version
    - Ideally always use the latest version
    - Typically 3 or higher
  - `services`:
    - Define the different microservices
  - `networks`:
    - Creates new networks
    - By default it creates a `bridge` network to connect multiple containers on the same Docker host
  - `volumes`:
    - Creates new volumes
- **Key in services** describe a different "service" in terms of container
  - **Inner keys** specify the params of Docker run command
::::
::::{.column width=40%}
\footnotesize
  ```yaml
  version: "3.8"
  services:
    web-fe:
      build: .
      command: python app.py
      ports:
        - target: 5000
          published: 5001
      networks:
        - counter-net
      volumes:
        - type: volume
          source: counter-vol
          target: /code
    redis:
      image: "redis:alpine"
      networks:
        counter-net:
  networks:
    counter-net:
  volumes:
    counter-vol:
  ```
::::
:::

* Docker Compose: Commands
\begingroup \tiny
```text
> docker compose --help
Usage:  docker compose [OPTIONS] COMMAND
Options:
      --env-file string            Specify an alternate environment file.
  -f, --file stringArray           Compose configuration files
  -p, --project-name string        Project name

Commands:
  build       Build or rebuild services
  convert     Converts the compose file to platform's canonical format
  cp          Copy files/folders between a service container and the local filesystem
  create      Creates containers for a service.
  down        Stop and remove containers, networks
  events      Receive real time events from containers.
  exec        Execute a command in a running container.
  images      List images used by the created containers
  kill        Force stop service containers.
  logs        View output from containers
  ls          List running compose projects
  pause       Pause services
  port        Print the public port for a port binding.
  ps          List containers
  pull        Pull service images
  push        Push service images
  restart     Restart containers
  rm          Removes stopped service containers
  run         Run a one-off command on a service.
  start       Start services
  stop        Stop services
  top         Display the running processes
  unpause     Unpause services
  up          Create and start containers
  version     Show the Docker Compose version information
```
\endgroup

* Docker Compose: Commands
Build the containers for the services
\begingroup \footnotesize \color{blue}
```> docker compose build
```
\endgroup

Pull the needed images for the services
\begingroup \footnotesize \color{blue}
```> docker compose pull
```
\endgroup

Show the running services
\begingroup \footnotesize \color{blue}
```> docker compose ps
```
\endgroup

Show the status of the service
\begingroup \footnotesize \color{blue}
```> docker compose ls
```
\endgroup

Bring up the entire service
\begingroup \footnotesize \color{blue}
```> docker compose up
```
\endgroup

Rebuild after trying out some changes in dockerfile/compose file
\begingroup \footnotesize \color{blue}
```
> docker-compose up --build --force-recreate
```
\endgroup

Show the processes inside each container
\begingroup \tiny \color{blue}
```
> docker compose top
counter_app-redis-1
UID   PID     PPID    C    STIME   TTY   TIME       CMD
999   49590   49549   0    10:40   ?     00:00:02   redis-server *:6379

counter_app-web-fe-1
UID    PID     PPID    C    STIME   TTY   TIME       CMD
root   49614   49574   0    10:40   ?     00:00:00   python app.py
root   49734   49614   1    10:40   ?     00:00:08   /usr/local/bin/python /code/app.py
```
\endgroup

* Docker Compose: Commands
Build the containers for the services
\begingroup \footnotesize \color{blue}
```
> docker compose down
[+] Running 3/2
 Container counter_app-redis-1    Removed                                                
 Container counter_app-web-fe-1   Removed
 Network counter_app_counter-net  Removed
```
\endgroup

Shutdown service removing the volume (i.e., resetting state)
\begingroup \footnotesize \color{blue}
```
> docker-compose down -v
```
\endgroup
Shutdown service removing images and volume
\begingroup \footnotesize \color{blue}
```
> docker-compose down -v --rmi all
```
\endgroup

* Docker Compose: Tutorial
- Example taken from https://github.com/nigelpoulton/counter-app
- tutorial_docker_compose
- `> cd tutorials/tutorial_docker_compose`
- `> vi tutorial_docker_compose.md`

* Class Announcements
- **1 Project teams**
  - Posted UMD DATA605 - Class Project Teams - Spring 2023
  - If your name is not on any of the teams, please send me an email
  - No midterm or final exam, complete class project to get a grade
- **2 Team composition**
  - Teams based on your self-assessed skills
  - In each group there should be someone with experience with Git, Docker, Python, and so on
  - Teams are not perfect, but none of your team at your future jobs will be
  - Working in a team is a skill that takes a long time to hone: let's start practicing it
- **3 Class project complexity**
  - Projects have about the same complexity
  - If not, we will try to account for this when grading
  - Projects were assigned randomly to the teams
