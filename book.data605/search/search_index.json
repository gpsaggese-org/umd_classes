{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>automate.md coding-benchmark.md coding-models.md coding-tools.md guidelines_for_developers.md index.md</p>"},{"location":"automate.html","title":"Automate","text":""},{"location":"automate.html#tasks_and_automation","title":"Tasks and automation","text":"<ul> <li> <p>We want to use LLMs to increase the productivity of the team and the uniformity     of our code base</p> </li> <li> <p>The main tasks that we believe should be automated are:</p> </li> </ul>"},{"location":"automate.html#automate_part_of_the_code_reviews","title":"Automate (part of the) code reviews","text":"<ul> <li>E.g., the stuff we complain about all the time, not the architectural stuff</li> <li>Use GitHub Copilot</li> </ul> <pre><code>&gt; llm_transform.py -i helpers/hdbg.py -o - -p code_review_correctness\nhelpers/hdbg.py:41: Remove the unnecessary newline at the end of the return value of `_line`. The newline can be managed outside of the function if needed.\nhelpers/hdbg.py:50: Add documentation for the `chars` parameter in the `_frame` function docstring.\n</code></pre>"},{"location":"automate.html#automate_fixing_the_lints","title":"Automate fixing the lints","text":"<ul> <li> <p>Example workflow:</p> <p>```</p> <p>i lint llm_apply_cfile.py --cfile linter_warnings.txt -p code_apply_linter_instructions -v INFO ```</p> </li> </ul>"},{"location":"automate.html#write_boilerplate_unit_tests","title":"Write (boilerplate) unit tests","text":"<ul> <li>Use Cursor</li> <li>llm_transform.py</li> </ul>"},{"location":"automate.html#format_the_code","title":"Format the code","text":"<ul> <li>E.g., improve existing comments, adding comments, improve docstrings</li> <li>Solution:<ul> <li>Use llm_transform.py to add TODOs and / or fix it</li> </ul> </li> </ul>"},{"location":"automate.html#search_our_knowledge_base","title":"Search our knowledge base","text":"<ul> <li>Solution: Dify or our homebrew solution</li> </ul>"},{"location":"automate.html#format_our_knowledge_base","title":"Format our knowledge base","text":"<ul> <li>Solution: llm_transform.py</li> </ul>"},{"location":"automate.html#use_coverage_to_make_sure_the_code_is_properly_tested","title":"Use coverage to make sure the code is properly tested","text":""},{"location":"automate.html#use_metrics_on_github_to_measure_how_collaborators_are_performing","title":"Use metrics on GitHub to measure how collaborators are performing","text":"<ul> <li> <p>We want to make things available for all the team independently of the set up</p> </li> <li> <p>E.g., VSCode, PyCharm, vim</p> </li> <li> <p>We want to support multiple LLMs (including ones that run locally for privacy / cost savings)</p> </li> </ul>"},{"location":"coding-benchmark.html","title":"Coding benchmark","text":""},{"location":"coding-benchmark.html#software_ai_agents","title":"Software AI agents","text":"<ul> <li>Fork helpers and experiment with this</li> </ul> <p>https://github.com/cline/cline https://developers.cloudflare.com/workers-ai/</p> <ul> <li>https://github.com/princeton-nlp/SWE-agent </li> <li>The was GitHub copilot workspace demo but seems like there is only a waitlist at the moment</li> </ul>"},{"location":"coding-benchmark.html#princeton_swe-agent","title":"Princeton SWE-Agent","text":"<ul> <li>TLDR the tech is not there yet, the solutions are buggy and clunky most likely a better option would be to go with GitHub Copilot enterprise </li> </ul> <p>AbanteAi Mentatbot</p> <ul> <li>https://mentat.ai/docs/setup </li> <li>A bot, one can attach to a repo and get him to execute reviews/PRs etc.  </li> <li> <p>It seems to be very early and there is quite a lot of bugs at the moment  </p> <ul> <li>It\u2019s not working correctly  </li> <li>They are responsive on discord but seems like it\u2019s far from refined</li> </ul> </li> <li> <p>Should we possibly implement a lightweight bot? It should be pretty simple as far the GH integration goes  </p> <ul> <li>On the other hand, GH copilot is promising something similar \u201csoon\u201d  <ul> <li>![][image1]  </li> </ul> </li> <li>We\u2019re missing out on some features without the enterprise package  <ul> <li>![][image2]</li> </ul> </li> </ul> </li> </ul>"},{"location":"coding-benchmark.html#sdsaai","title":"SDSA.ai","text":"<p>https://sdsa.ai/</p>"},{"location":"coding-models.html","title":"Coding models","text":"<p>//</p>"},{"location":"coding-models.html#claude","title":"Claude","text":"<ul> <li> <p>TODO: Document https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver</p> </li> <li> <p>TODO: https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview</p> </li> <li> <p>TODO: https://github.com/anthropics/prompt-eng-interactive-tutorial</p> </li> </ul>"},{"location":"coding-tools.html","title":"Coding tools","text":""},{"location":"coding-tools.html#coding_agents","title":"Coding agents","text":""},{"location":"coding-tools.html#claude_code","title":"Claude code","text":""},{"location":"coding-tools.html#introduction","title":"Introduction","text":"<ul> <li> <p>Install and configure</p> <ul> <li>Follow the set-up from https://docs.anthropic.com/en/docs/claude-code/setup</li> </ul> </li> <li> <p>What is Claude Code?</p> <ul> <li>Specialized capability of Claude for software development tasks</li> <li>Designed to help with:<ul> <li>Writing code from scratch</li> <li>Debugging existing code</li> <li>Explaining code logic</li> <li>Converting code between languages</li> <li>Generating tests and documentation</li> </ul> </li> </ul> </li> <li> <p>Core Use Cases</p> <ul> <li>Explain<ul> <li>Break down code line-by-line</li> <li>Clarify complex algorithms</li> </ul> </li> <li>Write<ul> <li>Generate functions, classes, modules</li> <li>Follow user style guides and constraints</li> </ul> </li> <li>Transform<ul> <li>Refactor code for readability or performance</li> <li>Convert code to different frameworks/languages</li> </ul> </li> <li>Complete<ul> <li>Fill in partial implementations</li> <li>Suggest alternative solutions</li> </ul> </li> <li>Test<ul> <li>Generate unit tests</li> <li>Identify edge cases</li> </ul> </li> </ul> </li> <li> <p>Strengths</p> <ul> <li>Handles long code files and complex projects</li> <li>Maintains conversational context for iterative coding</li> <li>Produces clear, well-commented code</li> <li>Supports multiple programming languages</li> </ul> </li> <li> <p>How It Works</p> </li> <li>Uses context window to \u201cread\u201d entire files if needed</li> <li>Retains history to apply consistent style/logic</li> <li> <p>Can work with multiple files at once</p> </li> <li> <p>Best Practices</p> <ul> <li>Provide clear instructions:<ul> <li>Define programming language</li> <li>Specify libraries, versions, frameworks</li> <li>Share input/output expectations</li> </ul> </li> <li>Break requests into steps for complex tasks</li> <li>Ask for explanations alongside generated code to verify intent</li> </ul> </li> <li> <p>Limitations</p> <ul> <li>May produce non-compiling code \u2014 always test</li> <li>Can hallucinate libraries or functions \u2014 verify usage</li> <li>May require iterative refinement for large systems</li> </ul> </li> </ul>"},{"location":"coding-tools.html#coding_with_claude_code","title":"Coding with Claude code","text":"<ul> <li> <p>From https://www.anthropic.com/engineering/claude-code-best-practices</p> </li> <li> <p>Claude Code</p> <ul> <li>Command line for agentic coding</li> <li>Provide model access without forcing workflows</li> </ul> </li> </ul>"},{"location":"coding-tools.html#1_customize_your_setup","title":"1. Customize your setup","text":"<ul> <li> <p>Claude Code automatically pulls context into prompts</p> </li> <li> <p><code>CLAUDE.md</code> is pulled in at the beginning of each context</p> <ul> <li>Common bash commands</li> <li>Code style guidelines</li> <li>Testing instructions</li> <li>Repo etiquette</li> <li>Dev env set up</li> </ul> </li> <li> <p>It can be in each dir of the repo and in your home folder</p> </li> <li> <p>You need to tune your <code>CLAUDE.md</code> by iterating on its effectiveness</p> <ul> <li>Use prompt improver</li> <li>Tune instructions<ul> <li>E.g., <code>IMPORTANT</code> and <code>YOU MUST</code> to improve adherence</li> </ul> </li> </ul> </li> <li> <p>Claude Code requests permission for any action that might modify your system</p> <ul> <li>It prioritize safety</li> <li>You can customize <code>allowlist</code> in <code>.claude/settings.json</code> <code>bash     &gt; more .claude/settings.local.json     {         \"permissions\": {             \"allow\": [                 \"Bash(find:*)\",                 \"Bash(invoke --list)\",                 \"Bash(grep:*)\",                 \"Bash(ls:*)\",                 \"WebFetch(domain:github.com)\",                 \"Bash(python -m mypy:*)\",                 \"Bash(python:*)\",                 \"Bash(invoke git_branch_create -i 903)\",                 \"Bash(gh pr create:*)\",                 \"Bash(gh pr view:*)\",                 \"Bash(invoke git_branch_create *)\",                 \"Bash(git add:*)\",                 \"Bash(git push:*)\",                 \"Bash(git commit:*)\"             ],             \"deny\": []         }     }</code></li> </ul> </li> </ul>"},{"location":"coding-tools.html#2_give_claude_more_tools","title":"2. Give Claude more tools","text":"<ul> <li> <p>You can give Claude more tools</p> <ul> <li>Knows and Unix tools</li> <li>Knows GitHub <code>gh</code> CLI</li> <li>Knows MCP and REST APIs</li> <li>Give your tools name and usage examples</li> <li>Document used tools in <code>CLAUDE.md</code></li> </ul> </li> <li> <p>Curate list of allowed tools</p> <ul> <li><code>.claude/settings.json</code></li> </ul> </li> <li> <p>Store prompt templates in Markdown files in <code>.claude/commands</code></p> <ul> <li>Are available as <code>/</code> commands (you can pass commands)</li> <li>E.g., for <code>.claude/commands/fix_gh_issue.md</code>, you can run     <code>/project:fix_gh_issue 1234</code></li> </ul> </li> </ul>"},{"location":"coding-tools.html#3_try_common_workflows","title":"3. Try common workflows","text":"<ul> <li> <p>Explore</p> <ul> <li>Ask to read relevant files (but tell it not to write any code)<ul> <li>E.g., <code>read logging.py</code></li> <li>E.g., <code>read the file that handles logging</code></li> </ul> </li> <li>Codebase Q&amp;A<ul> <li>Use for learning and exploration</li> <li>Ask questions like in pair programming</li> </ul> </li> </ul> </li> <li> <p>Plan</p> <ul> <li>Claude tends to jump to coding a solution</li> <li>Asking Claude to plan first improves performance for the tasks that require     thinking upfront</li> <li>Ask to make a plan for how to approach a specific problem<ul> <li>Use the word <code>think</code> &lt; <code>think hard</code> &lt; <code>ultrathink</code> to allocate thinking     budget</li> <li>Create a markdown doc with its plan</li> </ul> </li> </ul> </li> <li> <p>Code</p> </li> <li>Ask to implement solution in code<ul> <li>Ask to verify how reasonable is the solution or pieces</li> </ul> </li> <li> <p>Ask to commit and create a PR</p> <ul> <li>Ask to update <code>README</code> and changelog</li> </ul> </li> <li> <p>TDD development</p> <ul> <li>Test-driven development (TDD) becomes powerful with agentic coding<ul> <li>Claude performs best when it has a clear target to iterate against</li> </ul> </li> <li>Ask to write tests based on expected input / output pairs<ul> <li>Be explicit asking to avoid creating mock implementations for functionalities     that don't exist yet</li> </ul> </li> <li>Tell to run the tests and confirm they fail<ul> <li>Often helpful to tell not to write implementation</li> </ul> </li> <li>Ask to commit tests when satisfied with them</li> <li>Ask to write code that passes the tests, without modifying the tests<ul> <li>Tell to keep going until all tests pass</li> </ul> </li> <li>Ask to commit code when satisfied</li> </ul> </li> <li> <p>Use Claude to interact with Git</p> <ul> <li>E.g.,     <code>bash     &gt; echo \"How to show the Git history of last 5 commits\" | claude -p     `git log --oneline -5`</code></li> <li>\"Write a commit message\"</li> <li>\"Resolve rebase conflicts\"</li> </ul> </li> <li> <p>Use to interact with GitHub</p> <ul> <li>Create PRs</li> <li>Fix failing builds </li> <li>Fix linter warnings</li> </ul> </li> <li> <p>Read and write Jupyter notebooks</p> <ul> <li>Have CC and .ipynb opened in VS code</li> <li>\"Make data visualization aesthetically pleasing\"</li> </ul> </li> </ul>"},{"location":"coding-tools.html#4_optimize_your_workflow","title":"4. Optimize your workflow","text":"<ul> <li> <p>Be specific and give clear directions to avoid iterations</p> <ul> <li>Bad: Add tests for <code>foo.py</code></li> <li>Good: write a new test case for <code>foo.py</code>, covering edge case where ..., avoid     mocks</li> </ul> </li> <li> <p>Use images when working with design mocks for UI and visual charts for analysis</p> </li> <li> <p>Give URLs to fetch and read</p> <ul> <li>\"Brainstorm fixes for https://github.com/...\"</li> </ul> </li> <li> <p>You can get better results by being an active collaborator and guiding</p> <ul> <li>Explain the task thoroughly</li> <li>Course correct</li> </ul> </li> <li> <p>To course correct:</p> <ul> <li>Ask to make a plan</li> <li>Press escape to interrupt</li> <li>Double-escape to jump back in history and edit a previous prompt</li> <li>Ask to undo changes</li> </ul> </li> <li> <p>Use <code>/clear</code> to keep context focused during long sessions</p> </li> <li> <p>Use a checklists for complex workflows</p> <ul> <li>E.g., when fixing lint errors, tell to run the lint command, write all     resulting errors to a md checklist</li> <li>Instruct to address each issue one by one, fixing and verifying before     checking it off and moving to the next one</li> </ul> </li> </ul>"},{"location":"coding-tools.html#5_use_headless_mode_to_automate_infra","title":"5. Use headless mode to automate infra","text":"<ul> <li>Use <code>-p</code> flag to have Claude interact with CI, pre-commit hooks, automation     scripts<ul> <li>E.g., triage a new issue created in a repo</li> </ul> </li> <li>Use as a linter<ul> <li>Identify typos, stale comments, misleading function or var names</li> </ul> </li> </ul>"},{"location":"coding-tools.html#6_multi-claude_workflows","title":"6. Multi-Claude workflows","text":"<ul> <li>It is better to have a single instance handle everything<ul> <li>Have one Claude write code</li> <li>Start a second Claude in another terminal</li> <li>Have a second Claude review the first Claude's work</li> </ul> </li> <li>Create multiple checkouts of your repo<ul> <li>E.g., <code>git clone</code> the same repo in multiple directories</li> </ul> </li> <li>Use <code>git worktrees</code></li> </ul>"},{"location":"coding-tools.html#references","title":"References","text":"<ul> <li>https://www.anthropic.com/claude-code</li> <li>https://www.anthropic.com/engineering/claude-code-best-practices</li> <li>https://news.ycombinator.com/item?id=43735550 // https://github.com/anthropics/anthropic-cookbook // https://github.com/anthropics/courses // https://docs.anthropic.com/en/docs/claude-code/tutorials</li> </ul>"},{"location":"coding-tools.html#openai_codex","title":"OpenAI Codex","text":"<p>./notes/cs.openai.txt</p>"},{"location":"coding-tools.html#aider","title":"Aider","text":"<p>// ./notes/IN_PROGRESS.cs.aider.txt // ~~https://aider.chat/~~ // ~~https://github.com/Aider-AI/aider~~ // ~~Free~~ // # Aider //  // ## Installing //  // &gt; pip install aider-chat //  // In case of Unable to list files in git repo: [Errno 24] Too many open files // &gt; ulimit -n 8192 //  // &gt; aider --model sonnet --api-key anthropic=$ANTHROPIC_KEY //  // https://aider.chat/docs/faq.html#can-i-use-aider-in-a-large-mono-repo //  // Tie the output to a markdown // &gt; aider --model sonnet --api-key anthropic=$ANTHROPIC_KEY --chat-history-file aider_chat.md</p>"},{"location":"coding-tools.html#google_cli","title":"Google CLI","text":"<p>// https://blog.google/technology/developers/introducing-gemini-cli-open-source-ai-agent/</p>"},{"location":"coding-tools.html#ides","title":"IDEs","text":"<ul> <li>The goal of this guide is to inspire users to be more productive using AI     tools, successfully accomplish initial set-up. For detailed documentation     follow the suggested links</li> </ul>"},{"location":"coding-tools.html#github_copilot","title":"GitHub Copilot","text":""},{"location":"coding-tools.html#confirm_you_have_access_to_a_license","title":"Confirm you have access to a license","text":"<ol> <li>Visit https://github.com/settings/copilot</li> <li>The page should read that GitHub Copilot Business is active for your    account</li> <li>If not, contact the Infra team / GP</li> </ol>"},{"location":"coding-tools.html#vscode_set-up","title":"VSCode set-up","text":"<ol> <li>Open a new VSCode window and open the extensions marketplace with    <code>CMD + Shift + X</code></li> <li>Install 2 extensions</li> <li>GitHub Copilot</li> <li>GitHub Copilot Chat</li> <li>VSCode might prompt you to sign in using your GH account via a notification    window in the bottom right, unless you are already signed in</li> <li> <p>You can also sign in by clicking the \"Accounts\" button in the bottom left      of the window</p> </li> <li> <p>Reference document: https://code.visualstudio.com/docs/copilot/setup</p> </li> <li> <p>After successfully logging in, Copilot should automatically start suggesting     code</p> <ul> <li>If it doesn't visit the troubleshooting page     https://docs.github.com/en/copilot/troubleshooting-github-copilot/troubleshooting-common-issues-with-github-copilot</li> </ul> </li> </ol>"},{"location":"coding-tools.html#copilot_code_suggestions","title":"Copilot Code suggestions","text":"<ul> <li> <p>Reference document:     https://docs.github.com/en/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot</p> </li> <li> <p>The following steps will provide an example for resolution of issue     https://github.com/cryptokaizen/cmamp/issues/9451 using GitHub Copilot</p> </li> <li>In this GH issue we want to add tests for the function     <code>datapull/common/universe/universe.py::get_vendor_universe_as_asset_ids</code></li> <li> <p>Go to the file <code>datapull/common/universe/test/test_universe.py</code></p> <ul> <li>If there is a test called <code>Test_get_vendor_universe_as_assert_ids</code> you can     delete it for this example</li> </ul> </li> <li> <p>For example, suppose we want to add new test cases, typing     <code>class Test_get_vendor_universe_as_assert_ids(</code> and Copilot suggests code     </p> </li> <li> <p>We can use the mouse to control the generated code or use</p> <ul> <li><code>TAB</code> accepts the suggestion</li> <li><code>Control + \u2192</code> will accept only the next word (useful if the suggested code     is only \"kind-of\" correct)</li> <li><code>Alt + [</code> / <code>Alt + ]</code> show previous / next suggestion, since usually Copilot     generates multiple ones</li> <li>For a full list of shortcuts refer to the reference docs in the note above</li> </ul> </li> <li> <p>It is also possible to describe a test in natural language     </p> </li> </ul>"},{"location":"coding-tools.html#copilot_chat","title":"Copilot Chat","text":"<ul> <li> <p>Reference document:     https://docs.github.com/en/copilot/using-github-copilot/asking-github-copilot-questions-in-your-ide</p> </li> <li> <p>You can access the chat in the activity bar on the left</p> </li> <li> <p>If you don't see the icon, right-click on the activity bar and enable      \"Chat\"</p> </li> <li> <p>Apart from the general ChatGPT like capabilities, Copilot chat offers unique    features related to coding</p> </li> <li>Chat participants<ul> <li><code>@workspace</code> has context about the code in the current workspace, this    helps Copilot consider the project structure</li> <li>You can also specify \"this file\" when engineering a prompt for the tab    you have opened</li> </ul> </li> <li>Chat context<ul> <li>You can use so-called chat variables to include more context; a chat    variable is accessed via <code>#</code>,</li> <li><code>#file</code> adds additional context from a given file<ul> <li>E.g. <code>#file:datapull/common/data/universe.py</code></li> </ul> </li> </ul> </li> <li> <p>Slash commands</p> <ul> <li>Provide shortcuts to commonly used features</li> <li>E.g. <code>/tests</code> to generate unit tests for the selected code</li> </ul> </li> <li> <p>For a quick suggestion, you can use inline chat using current line or a    selection and <code>CMD + i</code> </p> </li> <li> <p>Right clicking in a window or on a selection <code>Copilot</code> offers quick actions    of Copilot similar to slash commands, such as:</p> </li> <li><code>Explain this</code></li> <li><code>Fix this</code></li> <li><code>Generate docs</code></li> <li><code>Generate tests</code></li> </ul>"},{"location":"coding-tools.html#tips_tricks","title":"Tips &amp; Tricks","text":"<ul> <li>The entry point of the GitHub copilot documentation is     https://docs.github.com/en/copilot</li> <li>Tips on prompt engineering:     https://docs.github.com/en/copilot/using-github-copilot/prompt-engineering-for-github-copilot</li> <li> <p>Example prompts:     https://docs.github.com/en/copilot/using-github-copilot/example-use-cases/example-prompts-for-copilot-chat</p> </li> <li> <p>For detailed documentation of integrating VSCode and Copilot:     https://code.visualstudio.com/docs/copilot/overview</p> </li> </ul>"},{"location":"coding-tools.html#chatgpt","title":"ChatGPT","text":""},{"location":"coding-tools.html#cursor","title":"Cursor","text":""},{"location":"coding-tools.html#devin","title":"Devin","text":"<p>// https://simonwillison.net/2025/Apr/16/</p> <p>// https://simonwillison.net/series/using-llms/ // https://simonwillison.net/series/llms-annual-review/</p> <p>// New tools to try // Try refact.ai** Try https://refact.ai/ $10</p> <p>// ## Devin</p> <p>// ## Codeium</p> <p>// ## Rope // Experiment with Rope to refactor Python code // https://rope.readthedocs.io/en/latest/index.html</p> <p>// Our tools // llm_transform.py: a tool we have developed that process files through a prompt and / or with vim // llm_apply_cfile.py</p>"},{"location":"guidelines_for_developers.html","title":"Guidelines for developers","text":""},{"location":"guidelines_for_developers.html#how_to_use_coding_ai","title":"How to use coding AI","text":"<p>The best applications for AI coding are: - Generate boilerplate code (like 80-90%) of an entire task - Perform deterministic transformations (e.g., apply a certain style, add     documentation to an existing piece of code) - Generate unit tests (at least the boilerplate) - Improve documentation of existing code - Explain code that you are not familiar with - Look up documentation (instead of Googling) - Infer type hints in existing code - Fix small localized bugs</p> <p>What AI coding is not good (yet) for:</p> <ul> <li>Generate end-to-end applications (unless it's a throw-away prototype)  <ul> <li>The problem is that AI can generate 90% of the application, but the last 10%     requires a lot of work and it's more difficult to explain than just doing it  </li> </ul> </li> <li>Fix bugs due to the interactions of multiple complex components in the code</li> </ul> <p>Our goal is:</p> <ul> <li>Not to replace our work with AI  </li> <li>Automate the repetitive tasks so that we can move fast  </li> <li>Have more fun by removing the boring part</li> </ul>"},{"location":"guidelines_for_developers.html#our_golden_rule","title":"Our golden rule","text":"<ul> <li>After using AI, you should be able to explain and understand the code as if it     was entirely written by you  </li> <li>You need to understand the code line-by-line  </li> <li>If one asks you \"what happens if I change this line\", you should know the     answer</li> </ul>"},{"location":"guidelines_for_developers.html#guidelines","title":"Guidelines:","text":"<ul> <li>Start with clear intent: define the problem and what you want the AI to do     (e.g., generate boilerplate, suggest optimizations).  </li> <li>Use AI for scaffolding, not final code: Let AI create the first draft, then     review and refactor manually for readability, performance, and idiomatic style.  </li> <li>Demand explicit explanations: Ask the AI to explain its choices and logic,     especially for unfamiliar patterns or complex implementations.  </li> <li>Integrate tests early: Auto-generate or manually write unit tests alongside AI     code to validate correctness and edge cases.  </li> <li>Apply consistent style: Use linters, formatters, and enforce style guides     (PEP8) to keep code human-readable.  </li> <li>Iterate in small pieces: Break down tasks into small, verifiable chunks so that     each AI-generated block is easy to understand and debug.  </li> <li>Document while coding: Add meaningful docstrings and comments to bridge any     AI-human comprehension gap.  </li> <li>Avoid over-reliance: Use AI as a pair programmer, not a replacement; regularly     write code without it to stay sharp.  </li> <li>Focus on the architecture, write the interfaces first, and then use AI to fill     up the code  </li> <li>Use a lot of OOP / classes to encapsulate components with clear and separate     responsibilities</li> </ul>"},{"location":"writing-style.html","title":"Writing style","text":""},{"location":"writing-style.html#technical_notes_format","title":"Technical Notes Format","text":""}]}