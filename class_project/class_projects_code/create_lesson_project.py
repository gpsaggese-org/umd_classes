#!/usr/bin/env python3

"""
Script to generate class projects for machine learning courses.

The script processes markdown files and can perform these actions:
1. create_project: Generate project descriptions for each section with Python packages
2. find_packages: Find 5 Python packages related to the lesson content

Examples:
> create_lesson_project.py --in_file input.md --action create_project --level medium --output_file output.md
> create_lesson_project.py --in_file input.md --action find_packages --output_file packages.md
"""

import argparse
import logging
import os

import class_project_utils as cutil
import helpers.hdbg as hdbg
import helpers.hio as hio
import helpers.hparser as hparser
import helpers.hprint as hprint
import helpers.htqdm as htqdm

_LOG = logging.getLogger(__name__)

_VALID_ACTIONS = ["create_project"]
_DEFAULT_ACTIONS = ["create_project"]


def _parse() -> argparse.ArgumentParser:
    """
    Parse command line arguments.
    """
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "--in_file",
        required=True,
        help="Input markdown file path",
    )
    parser.add_argument(
        "--output_file",
        help="Output file for results (used with create_project action)",
    )
    parser.add_argument(
        "--level",
        choices=["easy", "medium", "hard"],
        help="Complexity level for projects (required for create_project action)",
    )
    parser.add_argument(
        "--packages_file",
        help="Path to packages file generated by find_packages action (used with create_project)",
    )
    hparser.add_action_arg(parser, _VALID_ACTIONS, _DEFAULT_ACTIONS)
    hparser.add_verbosity_arg(parser)
    return parser




def _parse_packages_file(packages_file_path: str) -> list[str]:
    """
    Parse packages file to extract package names.
    
    Expected format:
    - **Package**: package_name
      **Description**: ...
      **Website**: ...
      **Documentation**: ...

    :param packages_file_path: Path to packages file
    :return: List of package names
    """
    if not os.path.exists(packages_file_path):
        _LOG.warning("Packages file not found: %s", packages_file_path)
        return []
    
    content = hio.from_file(packages_file_path)
    package_names = []
    
    for line in content.split('\n'):
        line = line.strip()
        # Look for lines that start with "- **Package**:"
        if line.startswith("- **Package**:"):
            # Extract package name after the colon
            package_part = line.split(":", 1)[1].strip()
            package_names.append(package_part)
    
    _LOG.debug("Parsed %d packages from %s: %s", len(package_names), packages_file_path, package_names)
    return package_names


def _action_create_project(
    in_file: str, output_file: str, level: str = "medium", packages_file: str = None
) -> None:
    """
    Create project descriptions based on markdown file.

    :param in_file: Input markdown file path
    :param output_file: Output file path
    :param level: Complexity level for projects (easy, medium, hard)
    :param packages_file: Optional path to packages file generated by find_packages action
    """
    _LOG.info("Starting create_project action for file: %s", in_file)
    # Read input file directly.
    hdbg.dassert_file_exists(in_file)
    file_content = hio.from_file(in_file)
    # Use the entire file content instead of extracting sections.
    _LOG.info("Processing entire file content")
    # Parse packages from packages file if provided.
    package_names = []
    if packages_file:
        package_names = _parse_packages_file(packages_file)
    
    # Generate projects for entire file content.
    result_lines = []
    tqdm_out = htqdm.TqdmToLogger(_LOG, level=logging.INFO)
    _LOG.debug("Generating projects for entire file")
    
    # Build packages section for the prompt.
    packages_section = ""
    if package_names:
        packages_list = ", ".join(package_names)
        packages_section = f"""
    
    Use these Python packages in your project suggestions when relevant: {packages_list}
    """
    
    prompt = f"""
    You are a college level data science professor.

    Given the markdown for a lecture, come up with the description of 1 project
    that can be used to clarify the content of the lesson and train the students.
    {packages_section}
    The Difficulty of the project can be
    - Easy, it should take around 7 days to develop
    - Medium , it should take around 10 days to complete
    - Hard, it should take 14 days to complete

    The difficulty level should be {level}.

    - Title:
    - Difficulty:
    - Tech description:
    - Project idea:
    - Data set to use:
    - Python libs:
    - Links to relevant tools
    - Links to related resources

    Avoid long texts or steps and comments, just list the projects.
    """
    prompt = hprint.dedent(prompt)
    projects = cutil.call_llm(prompt, file_content)
    result_lines.append("# Class Projects")
    result_lines.append(projects)
    result_lines.append("")  # Empty line for spacing.
    # Save result to output file.
    if not output_file:
        base_name = os.path.splitext(os.path.basename(in_file))[0]
        output_file = f"{base_name}.projects.txt"
    hio.to_file(output_file, "\n".join(result_lines))
    _LOG.info("Projects saved to: %s", output_file)




def _main(parser: argparse.ArgumentParser) -> None:
    """
    Main function to execute the script.
    """
    args = parser.parse_args()
    hdbg.init_logger(verbosity=args.log_level, use_exec_path=True)
    # Validate inputs.
    hdbg.dassert_file_exists(args.in_file)
    # Check LLM availability.
    cutil.check_llm_available()
    # Execute selected actions.
    actions = hparser.select_actions(args, _VALID_ACTIONS, _DEFAULT_ACTIONS)
    # Validate that --level is provided if create_project action is requested.
    if "create_project" in actions and not args.level:
        hdbg.dfatal("--level argument is required for create_project action")
    for action in actions:
        _LOG.info("Executing action: %s", action)
        if action == "create_project":
            # For create_project action, use output_file instead of output_dir.
            output_file = args.output_file
            if not output_file:
                # Default output file format if not specified.
                base_name = os.path.splitext(os.path.basename(args.in_file))[0]
                output_file = f"{base_name}.projects.txt"
            _action_create_project(args.in_file, output_file, args.level, args.packages_file)
        else:
            hdbg.dfatal("Invalid action: %s", action)


if __name__ == "__main__":
    _main(_parse())
